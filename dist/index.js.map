{"mappings":"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","sources":["index.js","core/dist/index.js","core/dist/src/Gesture.js","core/dist/src/Input.js","core/dist/src/PointerData.js","core/dist/src/Point2D.js","core/dist/src/constants.js","core/dist/src/utils.js","core/dist/src/Region.js","core/dist/src/State.js","core/dist/src/Smoothable.js","src/Pan.js","src/Pinch.js","src/Press.js","src/Pull.js","src/Pivotable.js","src/Rotate.js","src/Swipe.js","src/Swivel.js","src/Tap.js","src/Track.js"],"sourcesContent":["/**\n * The API interface for Westures. Defines a number of gestures on top of the\n * engine provided by {@link\n * https://mvanderkamp.github.io/westures-core/index.html|westures-core}.\n *\n * @namespace westures\n */\n\n'use strict';\n\nconst core = require('./core');\n\nconst Pan     = require('./src/Pan.js');\nconst Pinch   = require('./src/Pinch.js');\nconst Press   = require('./src/Press.js');\nconst Pull    = require('./src/Pull.js');\nconst Rotate  = require('./src/Rotate.js');\nconst Swipe   = require('./src/Swipe.js');\nconst Swivel  = require('./src/Swivel.js');\nconst Tap     = require('./src/Tap.js');\nconst Track   = require('./src/Track.js');\n\nmodule.exports = {\n  Pan,\n  Pinch,\n  Press,\n  Pull,\n  Rotate,\n  Swipe,\n  Swivel,\n  Tap,\n  Track,\n  ...core,\n};\n\n/**\n * Here are the return \"types\" of the gestures that are included in this\n * package.\n *\n * @namespace ReturnTypes\n */\n\n/**\n * The base data that is included for all emitted gestures.\n *\n * @typedef {Object} BaseData\n *\n * @property {westures-core.Point2D} centroid - The centroid of the input\n * points.\n * @property {Event} event - The input event which caused the gesture to be\n * recognized.\n * @property {string} phase - 'start', 'move', 'end', or 'cancel'.\n * @property {number} radius - The distance of the furthest input to the\n * centroid.\n * @property {string} type - The name of the gesture as specified by its\n * designer.\n * @property {Element} target - The bound target of the gesture.\n *\n * @memberof ReturnTypes\n */\n\n","/**\n * The global API interface for westures-core. Exposes all classes, constants,\n * and routines used by the package. Use responsibly.\n *\n * @namespace westures-core\n */\n\n'use strict';\n\nconst Gesture = require('./src/Gesture.js');\nconst Input = require('./src/Input.js');\nconst Point2D = require('./src/Point2D.js');\nconst PointerData = require('./src/PointerData.js');\nconst Region = require('./src/Region.js');\nconst Smoothable = require('./src/Smoothable.js');\nconst State = require('./src/State.js');\nconst constants = require('./src/constants.js');\nconst utils = require('./src/utils.js');\n\nmodule.exports = {\n  Gesture,\n  Input,\n  Point2D,\n  PointerData,\n  Region,\n  Smoothable,\n  State,\n  ...constants,\n  ...utils,\n};\n\n","'use strict';\n\nlet g_id = 0;\n\n/**\n * The Gesture class that all gestures inherit from. A custom gesture class will\n * need to override some or all of the four phase \"hooks\": start, move, end, and\n * cancel.\n *\n * @memberof westures-core\n *\n * @param {string} type - The name of the gesture.\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n *    is recognized on the associated element.\n * @param {object} [options] - Generic gesture options\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n */\nclass Gesture {\n  constructor(type, element, handler, options = {}) {\n    if (typeof type !== 'string') {\n      throw new TypeError('Gestures require a string type / name');\n    }\n\n    /**\n     * The name of the gesture. (e.g. 'pan' or 'tap' or 'pinch').\n     *\n     * @type {string}\n     */\n    this.type = type;\n\n    /**\n     * The unique identifier for each gesture. This allows for distinctions\n     * across instances of Gestures that are created on the fly (e.g.\n     * gesture-tap-1, gesture-tap-2).\n     *\n     * @type {string}\n     */\n    this.id = `gesture-${this.type}-${g_id++}`;\n\n    /**\n     * The element to which to associate the gesture.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The function handler to execute when the gesture is recognized on the\n     * associated element.\n     *\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     * The options. Can usually be adjusted live, though be careful doing this.\n     *\n     * @type {object}\n     */\n    this.options = { ...Gesture.DEFAULTS, ...options };\n  }\n\n  /**\n   * Determines whether this gesture is enabled.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {boolean} true if enabled, false otherwise.\n   */\n  isEnabled(state) {\n    const count = state.active.length;\n    const event = state.event;\n    const { enableKeys, disableKeys, minInputs, maxInputs } = this.options;\n\n    return (minInputs <= count) && (maxInputs >= count) &&\n      (enableKeys.length === 0 || enableKeys.some(k => event[k])) &&\n      !disableKeys.some(k => event[k]);\n  }\n\n  /**\n   * Event hook for the start phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  start() {\n    return null;\n  }\n\n  /**\n   * Event hook for the move phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  move() {\n    return null;\n  }\n\n  /**\n   * Event hook for the end phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  end() {\n    return null;\n  }\n\n  /**\n   * Event hook for when an input is cancelled.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  cancel() {\n    return null;\n  }\n\n  /**\n   * Evalutes the given gesture hook, and dispatches any data that is produced\n   * by calling [recognize]{@link westures-core.Gesture#recognize}.\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {westures-core.State} state - The current State instance.\n   */\n  evaluateHook(hook, state) {\n    const data = this[hook](state);\n    if (data) {\n      this.recognize(hook, state, data);\n    }\n  }\n\n  /**\n   * Recognize a Gesture by calling the handler. Standardizes the way the\n   * handler is called so that classes extending Gesture can circumvent the\n   * evaluateHook approach but still provide results that have a common format.\n   *\n   * Note that the properties in the \"data\" object will receive priority when\n   * constructing the results. This can be used to override standard results\n   * such as the phase or the centroid.\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {westures-core.State} state - current input state.\n   * @param {Object} data - Results data specific to the recognized gesture.\n   */\n  recognize(hook, state, data) {\n    this.handler({\n      centroid: state.centroid,\n      event:    state.event,\n      phase:    hook,\n      type:     this.type,\n      target:   this.element,\n      ...data,\n    });\n  }\n}\n\nGesture.DEFAULTS = {\n  enableKeys:  [],\n  disableKeys: [],\n  minInputs:   1,\n  maxInputs:   Number.MAX_VALUE,\n};\n\nmodule.exports = Gesture;\n\n","'use strict';\n\nconst PointerData = require('./PointerData.js');\nconst { getPropagationPath } = require('./utils.js');\n\n/**\n * Tracks a single input and contains information about the current, previous,\n * and initial events.\n *\n * @memberof westures-core\n *\n * @param {(PointerEvent | MouseEvent | TouchEvent)} event - The input event\n * which will initialize this Input object.\n * @param {number} identifier - The identifier for this input, so that it can\n * be located in subsequent Event objects.\n */\nclass Input {\n  constructor(event, identifier) {\n    const currentData = new PointerData(event, identifier);\n\n    /**\n     * The set of elements along the original event's propagation path at the\n     * time it was dispatched.\n     *\n     * @type {WeakSet.<Element>}\n     */\n    this.initialElements = new WeakSet(getPropagationPath(event));\n\n    /**\n     * Holds the initial data from the mousedown / touchstart / pointerdown that\n     * began this input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.initial = currentData;\n\n    /**\n     * Holds the most current pointer data for this Input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.current = currentData;\n\n    /**\n     * Holds the previous pointer data for this Input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.previous = currentData;\n\n    /**\n     * The identifier for the pointer / touch / mouse button associated with\n     * this input.\n     *\n     * @type {number}\n     */\n    this.identifier = identifier;\n  }\n\n  /**\n   * The phase of the input: 'start' or 'move' or 'end' or 'cancel'\n   *\n   * @type {string}\n   */\n  get phase() { return this.current.type; }\n\n  /**\n   * The timestamp of the initiating event for this input.\n   *\n   * @type {number}\n   */\n  get startTime() { return this.initial.time; }\n\n  /**\n   * The amount of time elapsed between the start of this input and its latest\n   * event.\n   *\n   * @type {number}\n   */\n  get elapsedTime() { return this.current.time - this.initial.time; }\n\n  /**\n   * @return {number} The distance between the initiating event for this input\n   *    and its current event.\n   */\n  totalDistance() {\n    return this.initial.point.distanceTo(this.current.point);\n  }\n\n  /**\n   * Saves the given raw event in PointerData form as the current data for this\n   * input, pushing the old current data into the previous slot, and tossing\n   * out the old previous data.\n   *\n   * @param {Event} event - The event object to wrap with a PointerData.\n   */\n  update(event) {\n    this.previous = this.current;\n    this.current = new PointerData(event, this.identifier);\n  }\n}\n\nmodule.exports = Input;\n\n","'use strict';\n\nconst Point2D   = require('./Point2D.js');\nconst { PHASE } = require('./constants.js');\n\n/**\n * @private\n * @inner\n * @memberof westures-core.PointerData\n *\n * @return {Event} The Event object which corresponds to the given identifier.\n *    Contains clientX, clientY values.\n */\nfunction getEventObject(event, identifier) {\n  if (event.changedTouches) {\n    return Array.from(event.changedTouches).find(touch => {\n      return touch.identifier === identifier;\n    });\n  }\n  return event;\n}\n\n/**\n * Low-level storage of pointer data based on incoming data from an interaction\n * event.\n *\n * @memberof westures-core\n *\n * @param {Event} event - The event object being wrapped.\n * @param {number} identifier - The index of touch if applicable\n */\nclass PointerData {\n  constructor(event, identifier) {\n    const { clientX, clientY } = getEventObject(event, identifier);\n\n    /**\n     * The original event object.\n     *\n     * @type {Event}\n     */\n    this.event = event;\n\n    /**\n     * The type or 'phase' of this batch of pointer data. 'start' or 'move' or\n     * 'end' or 'cancel'\n     *\n     * @type {string}\n     */\n    this.type = PHASE[event.type];\n\n    /**\n     * The timestamp of the event in milliseconds elapsed since January 1, 1970,\n     * 00:00:00 UTC.\n     *\n     * @type {number}\n     */\n    this.time = Date.now();\n\n    /**\n     * The (x,y) coordinate of the event, wrapped in a Point2D.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.point = new Point2D(clientX, clientY);\n  }\n}\n\nmodule.exports = PointerData;\n\n","'use strict';\n\n/**\n * The Point2D class stores and operates on 2-dimensional points, represented as\n * x and y coordinates.\n *\n * @memberof westures-core\n *\n * @param {number} [ x=0 ] - The x coordinate of the point.\n * @param {number} [ y=0 ] - The y coordinate of the point.\n */\nclass Point2D {\n  constructor(x = 0, y = 0) {\n    /**\n     * The x coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.y = y;\n  }\n\n  /**\n   * Calculates the angle between this point and the given point.\n   *\n   * @param {!westures-core.Point2D} point - Projected point for calculating the\n   * angle.\n   *\n   * @return {number} Radians along the unit circle where the projected\n   * point lies.\n   */\n  angleTo(point) {\n    return Math.atan2(point.y - this.y, point.x - this.x);\n  }\n\n  /**\n   * Determine the angle from the centroid to each of the points.\n   *\n   * @param {!westures-core.Point2D[]} points - the Point2D objects to calculate\n   *    the angles to.\n   *\n   * @returns {number[]}\n   */\n  anglesTo(points) {\n    return points.map(point => this.angleTo(point));\n  }\n\n  /**\n   * Determine the average distance from this point to the provided array of\n   * points.\n   *\n   * @param {!westures-core.Point2D[]} points - the Point2D objects to calculate\n   *    the average distance to.\n   *\n   * @return {number} The average distance from this point to the provided\n   *    points.\n   */\n  averageDistanceTo(points) {\n    return this.totalDistanceTo(points) / points.length;\n  }\n\n  /**\n   * Clone this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, identical to this point.\n   */\n  clone() {\n    return new Point2D(this.x, this.y);\n  }\n\n  /**\n   * Calculates the distance between two points.\n   *\n   * @param {!westures-core.Point2D} point - Point to which the distance is\n   * calculated.\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(point) {\n    return Math.hypot(point.x - this.x, point.y - this.y);\n  }\n\n  /**\n   * Subtract the given point from this point.\n   *\n   * @param {!westures-core.Point2D} point - Point to subtract from this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the result of (this\n   * - point).\n   */\n  minus(point) {\n    return new Point2D(\n      this.x - point.x,\n      this.y - point.y,\n    );\n  }\n\n  /**\n   * Return the summation of this point to the given point.\n   *\n   * @param {!westures-core.Point2D} point - Point to add to this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the addition of the\n   * two points.\n   */\n  plus(point) {\n    return new Point2D(\n      this.x + point.x,\n      this.y + point.y,\n    );\n  }\n\n  /**\n   * Calculates the total distance from this point to an array of points.\n   *\n   * @param {!westures-core.Point2D[]} points - The array of Point2D objects to\n   *    calculate the total distance to.\n   *\n   * @return {number} The total distance from this point to the provided points.\n   */\n  totalDistanceTo(points) {\n    return points.reduce((d, p) => d + this.distanceTo(p), 0);\n  }\n\n  /**\n   * Calculates the centroid of a list of points.\n   *\n   * @param {westures-core.Point2D[]} points - The array of Point2D objects for\n   * which to calculate the centroid.\n   *\n   * @return {westures-core.Point2D} The centroid of the provided points.\n   */\n  static centroid(points = []) {\n    if (points.length === 0) return null;\n\n    const total = Point2D.sum(points);\n    total.x /= points.length;\n    total.y /= points.length;\n    return total;\n  }\n\n  /**\n   * Calculates the sum of the given points.\n   *\n   * @param {westures-core.Point2D[]} points - The Point2D objects to sum up.\n   *\n   * @return {westures-core.Point2D} A new Point2D representing the sum of the\n   * given points.\n   */\n  static sum(points = []) {\n    return points.reduce(\n      (total, pt) => {\n        total.x += pt.x;\n        total.y += pt.y;\n        return total;\n      },\n      new Point2D(0, 0),\n    );\n  }\n}\n\nmodule.exports = Point2D;\n\n","'use strict';\n\n/**\n * List of events that trigger the cancel phase.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst CANCEL_EVENTS = [\n  'blur',\n  'pointercancel',\n  'touchcancel',\n  'mouseleave',\n];\n\n/**\n * List of keyboard events that trigger a restart.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst KEYBOARD_EVENTS = [\n  'keydown',\n  'keyup',\n];\n\n/**\n * List of mouse events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst MOUSE_EVENTS = [\n  'mousedown',\n  'mousemove',\n  'mouseup',\n];\n\n/**\n * List of pointer events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst POINTER_EVENTS = [\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n];\n\n/**\n * List of touch events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst TOUCH_EVENTS = [\n  'touchend',\n  'touchmove',\n  'touchstart',\n];\n\n/**\n * List of potentially state-modifying keys.\n * Entries are: ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst STATE_KEYS = [\n  'altKey',\n  'ctrlKey',\n  'metaKey',\n  'shiftKey',\n];\n\n/**\n * List of the 'key' values on KeyboardEvent objects of the potentially\n * state-modifying keys.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst STATE_KEY_STRINGS = [\n  'Alt',\n  'Control',\n  'Meta',\n  'Shift',\n];\n\n/**\n * The cancel phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst CANCEL = 'cancel';\n\n/**\n * The end phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst END = 'end';\n\n/**\n * The move phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst MOVE = 'move';\n\n/**\n * The start phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst START = 'start';\n\n/**\n * The recognized phases.\n *\n * @memberof westures-core\n * @type {list.<string>}\n */\nconst PHASES = [START, MOVE, END, CANCEL];\n\n/**\n * Object that normalizes the names of window events to be either of type start,\n * move, end, or cancel.\n *\n * @memberof westures-core\n * @type {object}\n */\nconst PHASE = {\n  blur:           CANCEL,\n  pointercancel:  CANCEL,\n  touchcancel:    CANCEL,\n\n  mouseup:       END,\n  pointerup:     END,\n  touchend:      END,\n\n  mousemove:   MOVE,\n  pointermove: MOVE,\n  touchmove:   MOVE,\n\n  mousedown:   START,\n  pointerdown: START,\n  touchstart:  START,\n};\n\nmodule.exports = {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEYS,\n  STATE_KEY_STRINGS,\n\n  CANCEL,\n  END,\n  MOVE,\n  START,\n\n  PHASE,\n  PHASES,\n};\n\n","'use strict';\n\nconst PI_2   = 2 * Math.PI;\nconst PI_NVE = -Math.PI;\n\n/**\n * Helper function to regulate angular differences, so they don't jump from 0 to\n * 2 * PI or vice versa.\n *\n * @memberof westures-core\n *\n * @param {number} a - Angle in radians.\n * @param {number} b - Angle in radians.\n\n * @return {number} c, given by: c = a - b such that |c| < PI\n */\nfunction angularDifference(a, b) {\n  let diff = a - b;\n  if (diff < PI_NVE) {\n    diff += PI_2;\n  } else if (diff > Math.PI) {\n    diff -= PI_2;\n  }\n  return diff;\n}\n\n/**\n * In case event.composedPath() is not available.\n *\n * @memberof westures-core\n *\n * @param {Event} event\n *\n * @return {Element[]} The elements along the composed path of the event.\n */\nfunction getPropagationPath(event) {\n  if (typeof event.composedPath === 'function') {\n    return event.composedPath();\n  }\n\n  const path = [];\n  for (let node = event.target; node !== document; node = node.parentNode) {\n    path.push(node);\n  }\n  path.push(document);\n  path.push(window);\n\n  return path;\n}\n\n/**\n * Performs a set filter operation.\n *\n * @memberof westures-core\n *\n * @param {Set} set - The set to filter.\n * @param {Function} predicate - Function to test elements of 'set'. Receives\n * one argument: the current set element.\n *\n * @return {Set} Set consisting of elements in 'set' for which 'predicate' is\n * true.\n */\nfunction setFilter(set, predicate) {\n  const result = new Set();\n  set.forEach(element => {\n    if (predicate(element)) {\n      result.add(element);\n    }\n  });\n  return result;\n}\n\n/**\n * Performs a set difference operation.\n *\n * @memberof westures-core\n *\n * @param {Set} left - Base set.\n * @param {Set} right - Set of elements to remove from 'left'.\n *\n * @return {Set} Set consisting of elements in 'left' that are not in\n * 'right'.\n */\nfunction setDifference(left, right) {\n  return setFilter(left, element => !right.has(element));\n}\n\nmodule.exports = {\n  angularDifference,\n  getPropagationPath,\n  setDifference,\n  setFilter,\n};\n\n","'use strict';\n\nconst State = require('./State.js');\nconst {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEY_STRINGS,\n\n  PHASE,\n\n  CANCEL,\n  END,\n  START,\n} = require('./constants.js');\nconst {\n  setDifference,\n  setFilter,\n} = require('./utils.js');\n\n/**\n * Allows the user to specify the control region which will listen for user\n * input events.\n *\n * @memberof westures-core\n *\n * @param {Element} element=window - The element which should listen to input\n * events.\n * @param {object} [options]\n * @param {boolean} [options.capture=false] - Whether the region uses the\n * capture phase of input events. If false, uses the bubbling phase.\n * @param {boolean} [options.preferPointer=true] - If false, the region listens\n * to mouse/touch events instead of pointer events.\n * @param {boolean} [options.preventDefault=true] - Whether the default\n * browser functionality should be disabled. This option should most likely be\n * ignored. Here there by dragons if set to false.\n * @param {string} [options.touchAction='none'] - Value to set the CSS\n * 'touch-action' property to on elements added to the region.\n */\nclass Region {\n  constructor(element = window, options = {}) {\n    options = { ...Region.DEFAULTS, ...options };\n\n    /**\n     * The list of relations between elements, their gestures, and the handlers.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.gestures = new Set();\n\n    /**\n     * The list of active gestures for the current input session.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.activeGestures = new Set();\n\n    /**\n     * The base list of potentially active gestures for the current input\n     * session.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.potentialGestures = new Set();\n\n    /**\n     * The element being bound to.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The user-supplied options for the Region.\n     *\n     * @type {object}\n     */\n    this.options = options;\n\n    /**\n     * The internal state object for a Region.  Keeps track of inputs.\n     *\n     * @type {westures-core.State}\n     */\n    this.state = new State(this.element);\n\n    // Begin operating immediately.\n    this.activate();\n  }\n\n  /**\n   * Activates the region by adding event listeners for all appropriate input\n   * events to the region's element.\n   *\n   * @private\n   */\n  activate() {\n    /*\n     * Listening to both mouse and touch comes with the difficulty that\n     * preventDefault() must be called to prevent both events from iterating\n     * through the system. However I have left it as an option to the end user,\n     * which defaults to calling preventDefault(), in case there's a use-case I\n     * haven't considered or am not aware of.\n     *\n     * It also may be a good idea to keep regions small in large pages.\n     *\n     * See:\n     *  https://www.html5rocks.com/en/mobile/touchandmouse/\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n     */\n    let eventNames = [];\n    if (this.options.preferPointer && window.PointerEvent) {\n      eventNames = POINTER_EVENTS;\n    } else {\n      eventNames = MOUSE_EVENTS.concat(TOUCH_EVENTS);\n    }\n\n    // Bind detected browser events to the region element.\n    const arbitrate = this.arbitrate.bind(this);\n    eventNames.forEach(eventName => {\n      this.element.addEventListener(eventName, arbitrate, {\n        capture: this.options.capture,\n        once:    false,\n        passive: false,\n      });\n    });\n\n    const cancel = this.cancel.bind(this);\n    CANCEL_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, cancel);\n    });\n\n    const handleKeyboardEvent = this.handleKeyboardEvent.bind(this);\n    KEYBOARD_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, handleKeyboardEvent);\n    });\n  }\n\n  /**\n   * Handles a cancel event. Resets the state and the active / potential gesture\n   * lists.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  cancel(event) {\n    if (this.options.preventDefault) event.preventDefault();\n    this.state.inputs.forEach(input => {\n      input.update(event);\n    });\n    this.activeGestures.forEach(gesture => {\n      gesture.evaluateHook(CANCEL, this.state);\n    });\n    this.state = new State(this.element);\n    this.resetActiveGestures();\n  }\n\n  /**\n   * Handles a keyboard event, triggering a restart of any gestures that need\n   * it.\n   *\n   * @private\n   * @param {KeyboardEvent} event - The keyboard event.\n   */\n  handleKeyboardEvent(event) {\n    if (STATE_KEY_STRINGS.indexOf(event.key) >= 0) {\n      this.state.event = event;\n      const oldActiveGestures = this.activeGestures;\n      this.setActiveGestures();\n\n      setDifference(oldActiveGestures, this.activeGestures).forEach(gesture => {\n        gesture.evaluateHook(END, this.state);\n      });\n      setDifference(this.activeGestures, oldActiveGestures).forEach(gesture => {\n        gesture.evaluateHook(START, this.state);\n      });\n    }\n  }\n\n  /**\n   * Resets the active gestures.\n   *\n   * @private\n   */\n  resetActiveGestures() {\n    this.potentialGestures = new Set();\n    this.activeGestures = new Set();\n  }\n\n  /**\n   * Selects active gestures from the list of potentially active gestures.\n   *\n   * @private\n   */\n  setActiveGestures() {\n    this.activeGestures = setFilter(this.potentialGestures, gesture => {\n      return gesture.isEnabled(this.state);\n    });\n  }\n\n  /**\n   * Selects the potentially active gestures.\n   *\n   * @private\n   */\n  setPotentialGestures() {\n    const input = this.state.inputs[0];\n    this.potentialGestures = setFilter(this.gestures, gesture => {\n      return input.initialElements.has(gesture.element);\n    });\n  }\n\n  /**\n   * Selects the gestures that are active for the current input sequence.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   * @param {boolean} isInitial - Whether this is an initial contact.\n   */\n  updateActiveGestures(event, isInitial) {\n    if (PHASE[event.type] === START) {\n      if (isInitial) {\n        this.setPotentialGestures();\n      }\n      this.setActiveGestures();\n    }\n  }\n\n  /**\n   * Evaluates whether the current input session has completed.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  pruneActiveGestures(event) {\n    if (PHASE[event.type] === END) {\n      if (this.state.hasNoInputs()) {\n        this.resetActiveGestures();\n      } else {\n        this.setActiveGestures();\n      }\n    }\n  }\n\n  /**\n   * All input events flow through this function. It makes sure that the input\n   * state is maintained, determines which gestures to analyze based on the\n   * initial position of the inputs, calls the relevant gesture hooks, and\n   * dispatches gesture data.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  arbitrate(event) {\n    const isInitial = this.state.hasNoInputs();\n    this.state.updateAllInputs(event);\n    this.updateActiveGestures(event, isInitial);\n\n    if (this.activeGestures.size > 0) {\n      if (this.options.preventDefault) event.preventDefault();\n\n      this.activeGestures.forEach(gesture => {\n        gesture.evaluateHook(PHASE[event.type], this.state);\n      });\n    }\n\n    this.state.clearEndedInputs();\n    this.pruneActiveGestures(event);\n  }\n\n  /**\n   * Adds the given gesture to the region.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  addGesture(gesture) {\n    gesture.element.style.touchAction = this.options.touchAction;\n    this.gestures.add(gesture);\n  }\n\n  /**\n   * Removes the given gesture from the region.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  removeGesture(gesture) {\n    this.gestures.delete(gesture);\n    this.potentialGestures.delete(gesture);\n    this.activeGestures.delete(gesture);\n  }\n\n  /**\n   * Retrieves Gestures by their associated element.\n   *\n   * @param {Element} element - The element for which to find gestures.\n   *\n   * @return {westures-core.Gesture[]} Gestures to which the element is bound.\n   */\n  getGesturesByElement(element) {\n    return setFilter(this.gestures, gesture => gesture.element === element);\n  }\n\n  /**\n   * Remove all gestures bound to the given element.\n   *\n   * @param {Element} element - The element to unbind.\n   */\n  removeGesturesByElement(element) {\n    this.getGesturesByElement(element).forEach(g => this.removeGesture(g));\n  }\n}\n\nRegion.DEFAULTS = {\n  capture:        false,\n  preferPointer:  true,\n  preventDefault: true,\n  touchAction:    'none',\n};\n\nmodule.exports = Region;\n","'use strict';\n\nconst {\n  CANCEL,\n  END,\n  MOVE,\n  PHASE,\n  START,\n} = require('./constants.js');\nconst Input     = require('./Input.js');\nconst Point2D   = require('./Point2D.js');\n\nconst symbols = {\n  inputs: Symbol.for('inputs'),\n};\n\n/**\n * Set of helper functions for updating inputs based on type of input.\n * Must be called with a bound 'this', via bind(), or call(), or apply().\n *\n * @private\n * @inner\n * @memberof westure-core.State\n */\nconst update_fns = {\n  TouchEvent: function TouchEvent(event) {\n    Array.from(event.changedTouches).forEach(touch => {\n      this.updateInput(event, touch.identifier);\n    });\n  },\n\n  PointerEvent: function PointerEvent(event) {\n    this.updateInput(event, event.pointerId);\n  },\n\n  MouseEvent: function MouseEvent(event) {\n    if (event.button === 0) {\n      this.updateInput(event, event.button);\n    }\n  },\n};\n\n/**\n * Keeps track of currently active and ending input points on the interactive\n * surface.\n *\n * @memberof westures-core\n *\n * @param {Element} element - The element underpinning the associated Region.\n */\nclass State {\n  constructor(element) {\n    /**\n     * Keep a reference to the element for the associated region.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Keeps track of the current Input objects.\n     *\n     * @alias [@@inputs]\n     * @type {Map.<westures-core.Input>}\n     * @memberof westure-core.State\n     */\n    this[symbols.inputs] = new Map();\n\n    /**\n     * All currently valid inputs, including those that have ended.\n     *\n     * @type {westures-core.Input[]}\n     */\n    this.inputs = [];\n\n    /**\n     * The array of currently active inputs, sourced from the current Input\n     * objects. \"Active\" is defined as not being in the 'end' phase.\n     *\n     * @type {westures-core.Input[]}\n     */\n    this.active = [];\n\n    /**\n     * The array of latest point data for the currently active inputs, sourced\n     * from this.active.\n     *\n     * @type {westures-core.Point2D[]}\n     */\n    this.activePoints = [];\n\n    /**\n     * The centroid of the currently active points.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.centroid = {};\n\n    /**\n     * The latest event that the state processed.\n     *\n     * @type {Event}\n     */\n    this.event = null;\n  }\n\n  /**\n   * Deletes all inputs that are in the 'end' phase.\n   */\n  clearEndedInputs() {\n    this[symbols.inputs].forEach((v, k) => {\n      if (v.phase === 'end') this[symbols.inputs].delete(k);\n    });\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {westures-core.Input[]} Inputs in the given phase.\n   */\n  getInputsInPhase(phase) {\n    return this.inputs.filter(i => i.phase === phase);\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {westures-core.Input[]} Inputs <b>not</b> in the given phase.\n   */\n  getInputsNotInPhase(phase) {\n    return this.inputs.filter(i => i.phase !== phase);\n  }\n\n  /**\n   * @return {boolean} True if there are no active inputs. False otherwise.\n   */\n  hasNoInputs() {\n    return this[symbols.inputs].size === 0;\n  }\n\n  /**\n   * Update the input with the given identifier using the given event.\n   *\n   * @private\n   *\n   * @param {Event} event - The event being captured.\n   * @param {number} identifier - The identifier of the input to update.\n   */\n  updateInput(event, identifier) {\n    switch (PHASE[event.type]) {\n    case START:\n      this[symbols.inputs].set(\n        identifier,\n        new Input(event, identifier),\n      );\n      try {\n        this.element.setPointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n      break;\n\n    // All of 'end', 'move', and 'cancel' perform updates, hence the\n    // following fall-throughs\n    case END:\n      try {\n        this.element.releasePointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n    case CANCEL:\n    case MOVE:\n      if (this[symbols.inputs].has(identifier)) {\n        this[symbols.inputs].get(identifier).update(event);\n      }\n      break;\n\n    default:\n      console.warn(`Unrecognized event type: ${event.type}`);\n    }\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   *\n   * @private\n   * @param {Event} event - The event being captured.\n   */\n  updateAllInputs(event) {\n    update_fns[event.constructor.name].call(this, event);\n    this.updateFields(event);\n  }\n\n  /**\n   * Updates the convenience fields.\n   *\n   * @private\n   * @param {Event} event - Event with which to update the convenience fields.\n   */\n  updateFields(event) {\n    this.inputs = Array.from(this[symbols.inputs].values());\n    this.active = this.getInputsNotInPhase('end');\n    this.activePoints = this.active.map(i => i.current.point);\n    this.centroid = Point2D.centroid(this.activePoints);\n    this.event = event;\n  }\n}\n\nmodule.exports = State;\n\n","'use strict';\n\nconst cascade = Symbol('cascade');\nconst smooth = Symbol('smooth');\n\n/**\n * Determines whether to apply smoothing. Smoothing is on by default but turned\n * off if either:<br>\n *  1. The user explicitly requests that it be turned off.<br>\n *  2. The active pointer is not \"coarse\".<br>\n *\n * @see {@link\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia}\n *\n * @inner\n * @memberof westures-core.Smoothable\n *\n * @param {boolean} isRequested - Whether smoothing was requested by the user.\n *\n * @returns {boolean} Whether to apply smoothing.\n */\nfunction smoothingIsApplicable(isRequested) {\n  if (isRequested) {\n    try {\n      return window.matchMedia('(pointer: coarse)').matches;\n    } catch (e) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A Smoothable datatype is one that is capable of smoothing out a series of\n * values as they come in, one at a time, providing a more consistent series. It\n * does this by creating some inertia in the values using a cascading average.\n * (For those who are interested in such things, this effectively means that it\n * provides a practical application of Zeno's Dichotomy).\n *\n * @example\n * const x = new Smoothable({ identity: 1 });\n * const a = x.next(1);   // 1.0\n * const b = x.next(1.2); // 1.1\n * const c = x.next(0.9); // 1.0\n * const d = x.next(0.6); // 0.8\n * const e = x.next(1.2); // 1.0\n * const f = x.next(1.6); // 1.3\n * x.restart();\n * const g = x.next(0);   // 0.5\n *\n * @memberof westures-core\n *\n * @param {Object} [options]\n * @param {boolean} [options.applySmoothing=true] Whether to apply smoothing to\n * the data.\n * @param {*} [options.identity=0] The identity value of this smoothable data.\n */\nclass Smoothable {\n  constructor(options = {}) {\n    const final_options = { ...Smoothable.DEFAULTS, ...options };\n\n    /**\n     * The function through which smoothed emits are passed.\n     *\n     * @method\n     * @param {*} data - The data to emit.\n     *\n     * @return {*} The smoothed out data.\n     */\n    this.next = null;\n    if (smoothingIsApplicable(final_options.applySmoothing)) {\n      this.next = this[smooth].bind(this);\n    } else {\n      this.next = data => data;\n    }\n\n    /**\n     * The \"identity\" value of the data that will be smoothed.\n     *\n     * @type {*}\n     * @default 0\n     */\n    this.identity = final_options.identity;\n\n    /**\n     * The cascading average of outgoing values.\n     *\n     * @memberof westures-core.Smoothable\n     * @alias [@@cascade]\n     * @type {object}\n     */\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Restart the Smoothable gesture.\n   */\n  restart() {\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Smooth out the outgoing data.\n   *\n   * @memberof westures-core.Smoothable\n   * @alias [@@smooth]\n   * @param {object} data - The next batch of data to emit.\n   *\n   * @return {?object}\n   */\n  [smooth](data) {\n    const average = this.average(this[cascade], data);\n    this[cascade] = average;\n    return average;\n  }\n\n  /**\n   * Average out two values, as part of the smoothing algorithm. Override this\n   * method if the data being smoothed is not a Number.\n   *\n   * @param {number} a\n   * @param {number} b\n   *\n   * @return {number} The average of 'a' and 'b'\n   */\n  average(a, b) {\n    return (a + b) / 2;\n  }\n}\n\nSmoothable.DEFAULTS = {\n  applySmoothing: true,\n  identity:       0,\n};\n\nmodule.exports = Smoothable;\n\n","/*\n * Contains the Pan class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, Smoothable } = require('../core');\n\n/**\n * Data returned when a Pan is recognized.\n *\n * @typedef {Object} PanData\n * @mixes ReturnTypes.BaseData\n *\n * @property {westures-core.Point2D} translation - The change vector from the\n * last emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pan is defined as a normal movement in any direction.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PanData}\n * @see {westures-core.Smoothable}\n * @memberof westures\n *\n * @param {Element} element - The element with which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Pan extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('pan', element, handler, options);\n\n    /**\n     * The previous point location.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.previous = null;\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<westures-core.Point2D>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: new Point2D() });\n    this.outgoing.average = (a, b) => Point2D.centroid([a, b]);\n  }\n\n  /**\n   * Resets the gesture's progress by saving the current centroid of the active\n   * inputs. To be called whenever the number of inputs changes.\n   *\n   * @param {State} state\n   */\n  restart(state) {\n    this.previous = state.centroid;\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const translation = state.centroid.minus(this.previous);\n    this.previous = state.centroid;\n    return { translation: this.outgoing.next(translation) };\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel(state) {\n    this.restart(state);\n  }\n}\n\nmodule.exports = Pan;\n\n","/*\n * Contains the abstract Pinch class.\n */\n\n'use strict';\n\nconst { Gesture, Smoothable } = require('../core');\n\n/**\n * Data returned when a Pinch is recognized.\n *\n * @typedef {Object} PinchData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} distance - The average distance from an active input to\n *    the centroid.\n * @property {number} scale - The proportional change in distance since last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pinch is defined as two or more inputs moving either together or apart.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PinchData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=2] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Pinch extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Pinch.DEFAULTS, ...options };\n    super('pinch', element, handler, options);\n\n    /**\n     * The previous distance.\n     *\n     * @type {number}\n     */\n    this.previous = 0;\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: 1 });\n  }\n\n  /**\n   * Initializes the gesture progress.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    this.previous = state.centroid.averageDistanceTo(state.activePoints);\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const distance = state.centroid.averageDistanceTo(state.activePoints);\n    const scale = distance / this.previous;\n    this.previous = distance;\n    return { distance, scale: this.outgoing.next(scale) };\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel(state) {\n    this.restart(state);\n  }\n}\n\nPinch.DEFAULTS = Object.freeze({\n  minInputs: 2,\n});\n\nmodule.exports = Pinch;\n\n","/*\n * Contains the Press class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, MOVE } = require('../core');\n\n/**\n * Data returned when a Press is recognized.\n *\n * @typedef {Object} PressData\n *\n * @property {westures-core.Point2D} centroid - The current centroid of the\n * input points.\n * @property {westures-core.Point2D} initial - The initial centroid of the input\n * points.\n * @property {number} distance - The total movement since initial contact.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Press is defined as one or more input points being held down without\n * moving. Press gestures may be stacked by pressing with additional pointers\n * beyond the minimum, so long as none of the points move or are lifted, a Press\n * will be recognized for each additional pointer.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PressData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {number} [options.delay=1000] - The delay before emitting, during\n * which time the number of inputs must not go below minInputs.\n * @param {number} [options.tolerance=10] - The tolerance in pixels a user can\n * move and still allow the gesture to emit.\n */\nclass Press extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('press', element, handler, { ...Press.DEFAULTS, ...options });\n  }\n\n  start(state) {\n    const initial = state.centroid;\n    const originalInputs = Array.from(state.active);\n    setTimeout(() => {\n      const inputs = state.active.filter(i => originalInputs.includes(i));\n      if (inputs.length === originalInputs.length) {\n        const centroid = Point2D.centroid(inputs.map(i => i.current.point));\n        const distance = initial.distanceTo(centroid);\n        if (distance <= this.options.tolerance) {\n          this.recognize(MOVE, state, { centroid, distance, initial });\n        }\n      }\n    }, this.options.delay);\n  }\n}\n\nPress.DEFAULTS = Object.freeze({\n  delay:     1000,\n  tolerance: 10,\n});\n\nmodule.exports = Press;\n\n","/*\n * Contains the abstract Pull class.\n */\n\n'use strict';\n\nconst { Smoothable } = require('../core');\nconst Pivotable = require('./Pivotable.js');\n\n/**\n * Data returned when a Pull is recognized.\n *\n * @typedef {Object} PullData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} distance - The average distance from an active input to\n * the centroid.\n * @property {number} scale - The proportional change in distance since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pull is defined as a single input moving away from or towards a pivot\n * point.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PullData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Pull extends Pivotable {\n  constructor(element, handler, options = {}) {\n    super('pull', element, handler, options);\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: 1 });\n  }\n\n  updatePrevious(state) {\n    this.previous = this.pivot.distanceTo(state.centroid);\n  }\n\n  move(state) {\n    const pivot = this.pivot;\n    const distance = pivot.distanceTo(state.centroid);\n    const scale = distance / this.previous;\n    const { deadzoneRadius } = this.options;\n\n    let rv = null;\n    if (distance > deadzoneRadius && this.previous > deadzoneRadius) {\n      rv = { distance, scale: this.outgoing.next(scale), pivot };\n    }\n\n    /*\n     * Updating the previous distance regardless of emit prevents sudden changes\n     * when the user exits the deadzone circle.\n     */\n    this.previous = distance;\n\n    return rv;\n  }\n}\n\nmodule.exports = Pull;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, Smoothable } = require('../core');\n\n/**\n * Data returned when a Pivotable is recognized.\n *\n * @typedef {Object} SwivelData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pivotable is a single input rotating around a fixed point. The fixed point\n * is determined by the input's location at its 'start' phase.\n *\n * @extends westures.Gesture\n * @see {ReturnTypes.SwivelData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Pivotable extends Gesture {\n  constructor(type = 'pivotable', element, handler, options = {}) {\n    super(type, element, handler, { ...Pivotable.DEFAULTS, ...options });\n\n    /**\n     * The pivot point of the pivotable.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.pivot = null;\n\n    /**\n     * The previous data.\n     *\n     * @type {number}\n     */\n    this.previous = 0;\n\n    /**\n     * The outgoing data.\n     *\n     * @type {westures-core.Smoothable}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  /**\n   * Determine the center point of the given element's bounding client\n   * rectangle.\n   *\n   * @static\n   *\n   * @param {Element} element - The DOM element to analyze.\n   * @return {westures-core.Point2D} - The center of the element's bounding\n   * client rectangle.\n   */\n  static getClientCenter(element) {\n    const rect = element.getBoundingClientRect();\n    return new Point2D(\n      rect.left + (rect.width / 2),\n      rect.top + (rect.height / 2),\n    );\n  }\n\n  /**\n   * Updates the previous data. It will be called during the 'start' and 'end'\n   * phases, and should also be called during the 'move' phase implemented by\n   * the subclass.\n   *\n   * @abstract\n   * @param {State} state - the current input state.\n   */\n  updatePrevious() {\n    throw 'Gestures which extend Pivotable must implement updatePrevious()';\n  }\n\n  /**\n   * Restart the given progress object using the given input object.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    if (this.options.dynamicPivot) {\n      this.pivot = state.centroid;\n      this.previous = 0;\n    } else {\n      this.pivot = Pivotable.getClientCenter(this.element);\n      this.updatePrevious(state);\n    }\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  end(state) {\n    if (state.active.length > 0) {\n      this.restart(state);\n    } else {\n      this.outgoing.restart();\n    }\n  }\n\n  cancel() {\n    this.outgoing.restart();\n  }\n}\n\nPivotable.DEFAULTS = Object.freeze({\n  deadzoneRadius: 15,\n  dynamicPivot:   false,\n});\n\nmodule.exports = Pivotable;\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { angularDifference, Gesture, Smoothable } = require('../core');\n\n/**\n * Data returned when a Rotate is recognized.\n *\n * @typedef {Object} RotateData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Rotate is defined as two inputs moving with a changing angle between them.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.RotateData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=2] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Rotate extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Rotate.DEFAULTS, ...options };\n    super('rotate', element, handler, options);\n\n    /**\n     * Track the previous angles for each input.\n     *\n     * @type {number[]}\n     */\n    this.previousAngles = [];\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  /**\n   * Restart the gesture for a new number of inputs.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    this.previousAngles = state.centroid.anglesTo(state.activePoints);\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const stagedAngles = state.centroid.anglesTo(state.activePoints);\n    const angle = stagedAngles.reduce((total, current, index) => {\n      return total + angularDifference(current, this.previousAngles[index]);\n    }, 0);\n    this.previousAngles = stagedAngles;\n    const rotation = angle / state.activePoints.length;\n    return { rotation: this.outgoing.next(rotation) };\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel() {\n    this.outgoing.restart();\n  }\n}\n\nRotate.DEFAULTS = Object.freeze({\n  minInputs: 2,\n});\n\nmodule.exports = Rotate;\n\n","/*\n * Contains the Swipe class.\n */\n\n'use strict';\n\nconst { Gesture } = require('../core');\n\nconst PROGRESS_STACK_SIZE = 7;\nconst MS_THRESHOLD = 300;\n\n/**\n * Data returned when a Swipe is recognized.\n *\n * @typedef {Object} SwipeData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} velocity - The velocity of the swipe.\n * @property {number} direction - In radians, the direction of the swipe.\n * @property {westures-core.Point2D} point - The point at which the swipe ended.\n * @property {number} time - The epoch time, in ms, when the swipe ended.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively\n * increasing velocity and leaving the screen at some point before it drops\n * below it's escape velocity.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.SwipeData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n */\nclass Swipe extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('swipe', element, handler, options);\n\n    /**\n     * Moves list.\n     *\n     * @type {object[]}\n     */\n    this.moves = [];\n\n    /**\n     * Data to emit when all points have ended.\n     *\n     * @type {ReturnTypes.SwipeData}\n     */\n    this.saved = null;\n  }\n\n  /**\n   * Restart the swipe state for a new numper of inputs.\n   */\n  restart() {\n    this.moves = [];\n    this.saved = null;\n  }\n\n  start() {\n    this.restart();\n  }\n\n  move(state) {\n    this.moves.push({\n      time:  Date.now(),\n      point: state.centroid,\n    });\n\n    if (this.moves.length > PROGRESS_STACK_SIZE) {\n      this.moves.splice(0, this.moves.length - PROGRESS_STACK_SIZE);\n    }\n  }\n\n  end(state) {\n    const result = this.getResult();\n    this.moves = [];\n\n    if (state.active.length > 0) {\n      this.saved = result;\n      return null;\n    }\n\n    this.saved = null;\n    return Swipe.validate(result);\n  }\n\n  cancel() {\n    this.restart();\n  }\n\n  /**\n   * Get the swipe result.\n   *\n   * @returns {?ReturnTypes.SwipeData}\n   */\n  getResult() {\n    if (this.moves.length < PROGRESS_STACK_SIZE) {\n      return this.saved;\n    }\n    const vlim = PROGRESS_STACK_SIZE - 1;\n    const { point, time } = this.moves[vlim];\n    const velocity = Swipe.calc_velocity(this.moves, vlim);\n    const direction = Swipe.calc_angle(this.moves, vlim);\n    const centroid = point;\n    return { point, velocity, direction, time, centroid };\n  }\n\n  /**\n   * Validates that an emit should occur with the given data.\n   *\n   * @static\n   * @param {?ReturnTypes.SwipeData} data\n   * @returns {?ReturnTypes.SwipeData}\n   */\n  static validate(data) {\n    if (data == null) return null;\n    return (Date.now() - data.time > MS_THRESHOLD) ? null : data;\n  }\n\n  /**\n   * Calculates the angle of movement along a series of moves.\n   *\n   * @static\n   * @see {@link https://en.wikipedia.org/wiki/Mean_of_circular_quantities}\n   *\n   * @param {{time: number, point: westures-core.Point2D}} moves - The moves\n   * list to process.\n   * @param {number} vlim - The number of moves to process.\n   *\n   * @return {number} The angle of the movement.\n   */\n  static calc_angle(moves, vlim) {\n    const point = moves[vlim].point;\n    let sin = 0;\n    let cos = 0;\n    for (let i = 0; i < vlim; ++i) {\n      const angle = moves[i].point.angleTo(point);\n      sin += Math.sin(angle);\n      cos += Math.cos(angle);\n    }\n    sin /= vlim;\n    cos /= vlim;\n    return Math.atan2(sin, cos);\n  }\n\n  /**\n   * Local helper function for calculating the velocity between two timestamped\n   * points.\n   *\n   * @static\n   * @param {object} start\n   * @param {westures-core.Point2D} start.point\n   * @param {number} start.time\n   * @param {object} end\n   * @param {westures-core.Point2D} end.point\n   * @param {number} end.time\n   *\n   * @return {number} velocity from start to end point.\n   */\n  static velocity(start, end) {\n    const distance = end.point.distanceTo(start.point);\n    const time = end.time - start.time + 1;\n    return distance / time;\n  }\n\n  /**\n   * Calculates the veloctiy of movement through a series of moves.\n   *\n   * @static\n   * @param {{time: number, point: westures-core.Point2D}} moves - The moves\n   * list to process.\n   * @param {number} vlim - The number of moves to process.\n   *\n   * @return {number} The velocity of the moves.\n   */\n  static calc_velocity(moves, vlim) {\n    let max = 0;\n    for (let i = 0; i < vlim; ++i) {\n      const current = Swipe.velocity(moves[i], moves[i + 1]);\n      if (current > max) max = current;\n    }\n    return max;\n  }\n}\n\nmodule.exports = Swipe;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { angularDifference, Smoothable } = require('../core');\nconst Pivotable = require('./Pivotable.js');\n\n/**\n * Data returned when a Swivel is recognized.\n *\n * @typedef {Object} SwivelData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Swivel is a single input rotating around a fixed point. The fixed point is\n * determined by the input's location at its 'start' phase.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.SwivelData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Swivel extends Pivotable {\n  constructor(element, handler, options = {}) {\n    super('swivel', element, handler, options);\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  updatePrevious(state) {\n    this.previous = this.pivot.angleTo(state.centroid);\n  }\n\n  move(state) {\n    const pivot = this.pivot;\n    const angle = pivot.angleTo(state.centroid);\n    const rotation = angularDifference(angle, this.previous);\n\n    let rv = null;\n    if (pivot.distanceTo(state.centroid) > this.options.deadzoneRadius) {\n      rv = { rotation: this.outgoing.next(rotation), pivot };\n    }\n\n    /*\n     * Updating the previous angle regardless of emit prevents sudden flips when\n     * the user exits the deadzone circle.\n     */\n    this.previous = angle;\n\n    return rv;\n  }\n}\n\nmodule.exports = Swivel;\n\n","/*\n * Contains the Tap class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D } = require('../core');\n\n/**\n * Data returned when a Tap is recognized.\n *\n * @typedef {Object} TapData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} x - x coordinate of tap point.\n * @property {number} y - y coordinate of tap point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Tap is defined as a touchstart to touchend event in quick succession.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.TapData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {number} [options.minDelay=0] - The minimum delay between a touchstart\n * and touchend can be configured in milliseconds.\n * @param {number} [options.maxDelay=300] - The maximum delay between a\n * touchstart and touchend can be configured in milliseconds.\n * @param {number} [options.maxRetain=300] - The maximum time after a tap ends\n * before it is discarded can be configured in milliseconds. Useful for\n * multi-tap gestures, to allow things like slow \"double clicks\".\n * @param {number} [options.numTaps=1] - Number of taps to require.\n * @param {number} [options.tolerance=10] - The tolerance in pixels an input can\n * move before it will no longer be considered part of a tap.\n */\nclass Tap extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('tap', element, handler, { ...Tap.DEFAULTS, ...options });\n\n    /**\n     * An array of inputs that have ended recently.\n     *\n     * @type {Input[]}\n     */\n    this.taps = [];\n  }\n\n  end(state) {\n    const now = Date.now();\n    const { minDelay, maxDelay, maxRetain, numTaps, tolerance } = this.options;\n\n    // Save the recently ended inputs as taps.\n    this.taps = this.taps.concat(state.getInputsInPhase('end'))\n      .filter(input => {\n        const elapsed = input.elapsedTime;\n        const tdiff = now - input.current.time;\n        return (\n          elapsed <= maxDelay\n          && elapsed >= minDelay\n          && tdiff <= maxRetain\n        );\n      });\n\n    // Validate the list of taps.\n    if (this.taps.length !== numTaps ||\n      this.taps.some(i => i.totalDistance() > tolerance)) {\n      return null;\n    }\n\n    const centroid = Point2D.centroid(this.taps.map(i => i.current.point));\n    this.taps = []; // Critical! Used taps need to be cleared!\n    return { centroid, ...centroid };\n  }\n}\n\nTap.DEFAULTS = Object.freeze({\n  minDelay:  0,\n  maxDelay:  300,\n  maxRetain: 300,\n  numTaps:   1,\n  tolerance: 10,\n});\n\nmodule.exports = Tap;\n\n","/*\n * Contains the Track class.\n */\n\n'use strict';\n\nconst { Gesture } = require('../core');\n\n/**\n * Data returned when a Track is recognized.\n *\n * @typedef {Object} TrackData\n * @mixes ReturnTypes.BaseData\n *\n * @property {westures-core.Point2D[]} active - Points currently in 'start' or\n *    'move' phase.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Track gesture forwards a list of active points and their centroid on each\n * of the selected phases.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.TrackData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {string[]} [options.phases=[]] Phases to recognize. Entries can be any\n * or all of 'start', 'move', 'end', and 'cancel'.\n */\nclass Track extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('track', element, handler, { ...Track.DEFAULTS, ...options });\n  }\n\n  /**\n   * Filters out the state's data, down to what should be emitted.\n\n   * @param {State} state - current input state.\n   * @return {ReturnTypes.TrackData}\n   */\n  data({ activePoints }) {\n    return { active: activePoints };\n  }\n\n  tracks(phase) {\n    return this.options.phases.includes(phase);\n  }\n\n  start(state) {\n    return this.tracks('start') ? this.data(state) : null;\n  }\n\n  move(state) {\n    return this.tracks('move') ? this.data(state) : null;\n  }\n\n  end(state) {\n    return this.tracks('end') ? this.data(state) : null;\n  }\n\n  cancel(state) {\n    return this.tracks('cancel') ? this.data(state) : null;\n  }\n}\n\nTrack.DEFAULTS = Object.freeze({\n  phases: Object.freeze([]),\n});\n\nmodule.exports = Track;\n\n"],"names":[],"version":3,"file":"index.js.map"}