{"version":3,"sources":["core/src/Gesture.js","core/src/Point2D.js","core/src/constants.js","core/src/PointerData.js","core/src/utils.js","core/src/Input.js","core/src/State.js","core/src/Region.js","core/src/Smoothable.js","core/index.js","src/Pan.js","src/Pinch.js","src/Press.js","src/Pivotable.js","src/Pull.js","src/Rotate.js","src/Swipe.js","src/Swivel.js","src/Tap.js","src/Track.js","index.js"],"names":["g_id","Gesture","type","element","handler","options","TypeError","id","DEFAULTS","state","count","active","length","event","enableKeys","disableKeys","minInputs","maxInputs","some","k","hook","data","recognize","centroid","phase","target","Number","MAX_VALUE","module","exports","Point2D","x","y","point","Math","atan2","points","totalDistanceTo","hypot","reduce","d","p","distanceTo","total","sum","pt","CANCEL_EVENTS","KEYBOARD_EVENTS","MOUSE_EVENTS","POINTER_EVENTS","TOUCH_EVENTS","STATE_KEYS","STATE_KEY_STRINGS","CANCEL","END","MOVE","START","PHASE","blur","pointercancel","touchcancel","mouseup","pointerup","touchend","mousemove","pointermove","touchmove","mousedown","pointerdown","touchstart","require","getEventObject","identifier","changedTouches","Array","from","find","touch","PointerData","clientX","clientY","time","Date","now","PI_2","PI","PI_NVE","angularDifference","a","b","diff","getPropagationPath","composedPath","path","node","document","parentNode","push","window","setFilter","set","predicate","result","Set","forEach","add","setDifference","left","right","has","Input","currentData","initialElements","WeakSet","initial","current","previous","symbols","inputs","Symbol","for","update_fns","TouchEvent","updateInput","PointerEvent","pointerId","MouseEvent","button","State","Map","activePoints","v","delete","filter","i","size","setPointerCapture","e","releasePointerCapture","get","update","console","warn","constructor","name","call","updateFields","values","getInputsNotInPhase","map","Region","gestures","activeGestures","potentialGestures","activate","eventNames","preferPointer","concat","arbitrate","bind","eventName","addEventListener","capture","once","passive","cancel","handleKeyboardEvent","preventDefault","input","gesture","evaluateHook","resetActiveGestures","indexOf","key","oldActiveGestures","setActiveGestures","isEnabled","isInitial","setPotentialGestures","hasNoInputs","updateAllInputs","updateActiveGestures","clearEndedInputs","pruneActiveGestures","style","touchAction","getGesturesByElement","g","removeGesture","cascade","smooth","smoothingIsApplicable","isRequested","matchMedia","matches","Smoothable","final_options","next","applySmoothing","identity","average","constants","utils","Pan","outgoing","restart","translation","minus","Pinch","averageDistanceTo","distance","scale","Object","freeze","Press","delay","tolerance","originalInputs","setTimeout","includes","getClientCenter","rect","getBoundingClientRect","width","top","height","Pivotable","deadzoneRadius","dynamicPivot","pivot","updatePrevious","Pull","rv","Rotate","previousAngles","angleTo","stagedAngles","anglesFromCentroid","angle","index","rotation","getRotation","PROGRESS_STACK_SIZE","MS_THRESHOLD","calc_angle","moves","vlim","sin","cos","velocity","start","end","calc_velocity","max","Swipe","saved","splice","getResult","validate","direction","Swivel","Tap","minDelay","maxDelay","numTaps","taps","getInputsInPhase","tdiff","startTime","totalDistance","Track","trackStart","phases","trackMove","trackEnd","trackCancel","core"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["'use strict';\n\nlet g_id = 0;\n\n/**\n * The Gesture class that all gestures inherit from. A custom gesture class will\n * need to override some or all of the four phase \"hooks\": start, move, end, and\n * cancel.\n *\n * @memberof westures-core\n *\n * @param {string} type - The name of the gesture.\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n *    is recognized on the associated element.\n * @param {object} [options] - Generic gesture options\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n */\nclass Gesture {\n  constructor(type, element, handler, options = {}) {\n    if (typeof type !== 'string') {\n      throw new TypeError('Gestures require a string type / name');\n    }\n\n    /**\n     * The name of the gesture. (e.g. 'pan' or 'tap' or 'pinch').\n     *\n     * @type {string}\n     */\n    this.type = type;\n\n    /**\n     * The unique identifier for each gesture. This allows for distinctions\n     * across instances of Gestures that are created on the fly (e.g.\n     * gesture-tap-1, gesture-tap-2).\n     *\n     * @type {string}\n     */\n    this.id = `gesture-${this.type}-${g_id++}`;\n\n    /**\n     * The element to which to associate the gesture.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The function handler to execute when the gesture is recognized on the\n     * associated element.\n     *\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     * The options settings.\n     *\n     * @type {object}\n     */\n    this.options = { ...Gesture.DEFAULTS, ...options };\n  }\n\n  /**\n   * Determines whether this gesture is enabled.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {boolean} true if enabled, false otherwise.\n   */\n  isEnabled(state) {\n    const count = state.active.length;\n    const event = state.event;\n    const { enableKeys, disableKeys, minInputs, maxInputs } = this.options;\n\n    return (minInputs <= count) && (maxInputs >= count) &&\n      (enableKeys.length === 0 || enableKeys.some(k => event[k])) &&\n      !disableKeys.some(k => event[k]);\n  }\n\n  /**\n   * Event hook for the start phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  start() {\n    return null;\n  }\n\n  /**\n   * Event hook for the move phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  move() {\n    return null;\n  }\n\n  /**\n   * Event hook for the end phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  end() {\n    return null;\n  }\n\n  /**\n   * Event hook for when an input is cancelled.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  cancel() {\n    return null;\n  }\n\n  /**\n   * Evalutes the given gesture hook, and dispatches any data that is produced\n   * by calling [recognize]{@link westures-core.Gesture#recognize}.\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {westures-core.State} state - The current State instance.\n   */\n  evaluateHook(hook, state) {\n    const data = this[hook](state);\n    if (data) {\n      this.recognize(hook, state, data);\n    }\n  }\n\n  /**\n   * Recognize a Gesture by calling the handler. Standardizes the way the\n   * handler is called so that classes extending Gesture can circumvent the\n   * evaluateHook approach but still provide results that have a common format.\n   *\n   * Note that the properties in the \"data\" object will receive priority when\n   * constructing the results. This can be used to override standard results\n   * such as the phase or the centroid.\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {westures-core.State} state - current input state.\n   * @param {Object} data - Results data specific to the recognized gesture.\n   */\n  recognize(hook, state, data) {\n    this.handler({\n      centroid: state.centroid,\n      event:    state.event,\n      phase:    hook,\n      type:     this.type,\n      target:   this.element,\n      ...data,\n    });\n  }\n}\n\nGesture.DEFAULTS = {\n  enableKeys:  [],\n  disableKeys: [],\n  minInputs:   1,\n  maxInputs:   Number.MAX_VALUE,\n};\n\nmodule.exports = Gesture;\n\n","'use strict';\n\n/**\n * The Point2D class stores and operates on 2-dimensional points, represented as\n * x and y coordinates.\n *\n * @memberof westures-core\n *\n * @param {number} [ x=0 ] - The x coordinate of the point.\n * @param {number} [ y=0 ] - The y coordinate of the point.\n */\nclass Point2D {\n  constructor(x = 0, y = 0) {\n    /**\n     * The x coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.y = y;\n  }\n\n  /**\n   * Calculates the angle between this point and the given point.\n   *\n   * @param {!westures-core.Point2D} point - Projected point for calculating the\n   * angle.\n   *\n   * @return {number} Radians along the unit circle where the projected\n   * point lies.\n   */\n  angleTo(point) {\n    return Math.atan2(point.y - this.y, point.x - this.x);\n  }\n\n  /**\n   * Determine the average distance from this point to the provided array of\n   * points.\n   *\n   * @param {!westures-core.Point2D[]} points - the Point2D objects to calculate\n   *    the average distance to.\n   *\n   * @return {number} The average distance from this point to the provided\n   *    points.\n   */\n  averageDistanceTo(points) {\n    return this.totalDistanceTo(points) / points.length;\n  }\n\n  /**\n   * Clone this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, identical to this point.\n   */\n  clone() {\n    return new Point2D(this.x, this.y);\n  }\n\n  /**\n   * Calculates the distance between two points.\n   *\n   * @param {!westures-core.Point2D} point - Point to which the distance is\n   * calculated.\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(point) {\n    return Math.hypot(point.x - this.x, point.y - this.y);\n  }\n\n  /**\n   * Subtract the given point from this point.\n   *\n   * @param {!westures-core.Point2D} point - Point to subtract from this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the result of (this\n   * - point).\n   */\n  minus(point) {\n    return new Point2D(\n      this.x - point.x,\n      this.y - point.y,\n    );\n  }\n\n  /**\n   * Return the summation of this point to the given point.\n   *\n   * @param {!westures-core.Point2D} point - Point to add to this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the addition of the\n   * two points.\n   */\n  plus(point) {\n    return new Point2D(\n      this.x + point.x,\n      this.y + point.y,\n    );\n  }\n\n  /**\n   * Calculates the total distance from this point to an array of points.\n   *\n   * @param {!westures-core.Point2D[]} points - The array of Point2D objects to\n   *    calculate the total distance to.\n   *\n   * @return {number} The total distance from this point to the provided points.\n   */\n  totalDistanceTo(points) {\n    return points.reduce((d, p) => d + this.distanceTo(p), 0);\n  }\n\n  /**\n   * Calculates the centroid of a list of points.\n   *\n   * @param {westures-core.Point2D[]} points - The array of Point2D objects for\n   * which to calculate the centroid.\n   *\n   * @return {westures-core.Point2D} The centroid of the provided points.\n   */\n  static centroid(points = []) {\n    if (points.length === 0) return null;\n\n    const total = Point2D.sum(points);\n    total.x /= points.length;\n    total.y /= points.length;\n    return total;\n  }\n\n  /**\n   * Calculates the sum of the given points.\n   *\n   * @param {westures-core.Point2D[]} points - The Point2D objects to sum up.\n   *\n   * @return {westures-core.Point2D} A new Point2D representing the sum of the\n   * given points.\n   */\n  static sum(points = []) {\n    return points.reduce(\n      (total, pt) => {\n        total.x += pt.x;\n        total.y += pt.y;\n        return total;\n      },\n      new Point2D(0, 0),\n    );\n  }\n}\n\nmodule.exports = Point2D;\n\n","'use strict';\n\n/**\n * List of events that trigger the cancel phase.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst CANCEL_EVENTS = [\n  'blur',\n  'pointercancel',\n  'touchcancel',\n  'mouseleave',\n];\n\n/**\n * List of keyboard events that trigger a restart.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst KEYBOARD_EVENTS = [\n  'keydown',\n  'keyup',\n];\n\n/**\n * List of mouse events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst MOUSE_EVENTS = [\n  'mousedown',\n  'mousemove',\n  'mouseup',\n];\n\n/**\n * List of pointer events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst POINTER_EVENTS = [\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n];\n\n/**\n * List of touch events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst TOUCH_EVENTS = [\n  'touchend',\n  'touchmove',\n  'touchstart',\n];\n\n/**\n * List of potentially state-modifying keys.\n * Entries are: ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst STATE_KEYS = [\n  'altKey',\n  'ctrlKey',\n  'metaKey',\n  'shiftKey',\n];\n\n/**\n * List of the 'key' values on KeyboardEvent objects of the potentially\n * state-modifying keys.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst STATE_KEY_STRINGS = [\n  'Alt',\n  'Control',\n  'Meta',\n  'Shift',\n];\n\n/**\n * The cancel phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst CANCEL = 'cancel';\n\n/**\n * The end phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst END = 'end';\n\n/**\n * The move phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst MOVE = 'move';\n\n/**\n * The start phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst START = 'start';\n\n/**\n * Object that normalizes the names of window events to be either of type start,\n * move, end, or cancel.\n *\n * @memberof westures-core\n * @type {object}\n */\nconst PHASE = {\n  blur:           CANCEL,\n  pointercancel:  CANCEL,\n  touchcancel:    CANCEL,\n\n  mouseup:       END,\n  pointerup:     END,\n  touchend:      END,\n\n  mousemove:   MOVE,\n  pointermove: MOVE,\n  touchmove:   MOVE,\n\n  mousedown:   START,\n  pointerdown: START,\n  touchstart:  START,\n};\n\nmodule.exports = {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEYS,\n  STATE_KEY_STRINGS,\n\n  CANCEL,\n  END,\n  MOVE,\n  START,\n\n  PHASE,\n};\n\n","'use strict';\n\nconst Point2D   = require('./Point2D.js');\nconst { PHASE } = require('./constants.js');\n\n/**\n * @private\n * @inner\n * @memberof westures-core.PointerData\n *\n * @return {Event} The Event object which corresponds to the given identifier.\n *    Contains clientX, clientY values.\n */\nfunction getEventObject(event, identifier) {\n  if (event.changedTouches) {\n    return Array.from(event.changedTouches).find(touch => {\n      return touch.identifier === identifier;\n    });\n  }\n  return event;\n}\n\n/**\n * Low-level storage of pointer data based on incoming data from an interaction\n * event.\n *\n * @memberof westures-core\n *\n * @param {Event} event - The event object being wrapped.\n * @param {number} identifier - The index of touch if applicable\n */\nclass PointerData {\n  constructor(event, identifier) {\n    const { clientX, clientY } = getEventObject(event, identifier);\n\n    /**\n     * The original event object.\n     *\n     * @type {Event}\n     */\n    this.event = event;\n\n    /**\n     * The type or 'phase' of this batch of pointer data. 'start' or 'move' or\n     * 'end' or 'cancel'\n     *\n     * @type {string}\n     */\n    this.type = PHASE[event.type];\n\n    /**\n     * The timestamp of the event in milliseconds elapsed since January 1, 1970,\n     * 00:00:00 UTC.\n     *\n     * @type {number}\n     */\n    this.time = Date.now();\n\n    /**\n     * The (x,y) coordinate of the event, wrapped in a Point2D.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.point = new Point2D(clientX, clientY);\n  }\n}\n\nmodule.exports = PointerData;\n\n","'use strict';\n\nconst PI_2   = 2 * Math.PI;\nconst PI_NVE = -Math.PI;\n\n/**\n * Helper function to regulate angular differences, so they don't jump from 0 to\n * 2 * PI or vice versa.\n *\n * @memberof westures-core\n *\n * @param {number} a - Angle in radians.\n * @param {number} b - Angle in radians.\n\n * @return {number} c, given by: c = a - b such that |c| < PI\n */\nfunction angularDifference(a, b) {\n  let diff = a - b;\n  if (diff < PI_NVE) {\n    diff += PI_2;\n  } else if (diff > Math.PI) {\n    diff -= PI_2;\n  }\n  return diff;\n}\n\n/**\n * In case event.composedPath() is not available.\n *\n * @memberof westures-core\n *\n * @param {Event} event\n *\n * @return {Element[]} The elements along the composed path of the event.\n */\nfunction getPropagationPath(event) {\n  if (typeof event.composedPath === 'function') {\n    return event.composedPath();\n  }\n\n  const path = [];\n  for (let node = event.target; node !== document; node = node.parentNode) {\n    path.push(node);\n  }\n  path.push(document);\n  path.push(window);\n\n  return path;\n}\n\n/**\n * Performs a set filter operation.\n *\n * @memberof westures-core\n *\n * @param {Set} set - The set to filter.\n * @param {Function} predicate - Function to test elements of 'set'. Receives\n * one argument: the current set element.\n *\n * @return {Set} Set consisting of elements in 'set' for which 'predicate' is\n * true.\n */\nfunction setFilter(set, predicate) {\n  const result = new Set();\n  set.forEach(element => {\n    if (predicate(element)) {\n      result.add(element);\n    }\n  });\n  return result;\n}\n\n/**\n * Performs a set difference operation.\n *\n * @memberof westures-core\n *\n * @param {Set} left - Base set.\n * @param {Set} right - Set of elements to remove from 'left'.\n *\n * @return {Set} Set consisting of elements in 'left' that are not in\n * 'right'.\n */\nfunction setDifference(left, right) {\n  return setFilter(left, element => !right.has(element));\n}\n\nmodule.exports = {\n  angularDifference,\n  getPropagationPath,\n  setDifference,\n  setFilter,\n};\n\n","'use strict';\n\nconst PointerData = require('./PointerData.js');\nconst { getPropagationPath } = require('./utils.js');\n\n/**\n * Tracks a single input and contains information about the current, previous,\n * and initial events. Contains the progress of each Input and its associated\n * gestures.\n *\n * @memberof westures-core\n *\n * @param {(PointerEvent | MouseEvent | TouchEvent)} event - The input event\n * which will initialize this Input object.\n * @param {number} identifier - The identifier for this input, so that it can\n * be located in subsequent Event objects.\n */\nclass Input {\n  constructor(event, identifier) {\n    const currentData = new PointerData(event, identifier);\n\n    /**\n     * The set of elements along the original event's propagation path at the\n     * time it was dispatched.\n     *\n     * @type {WeakSet.<Element>}\n     */\n    this.initialElements = new WeakSet(getPropagationPath(event));\n\n    /**\n     * Holds the initial data from the mousedown / touchstart / pointerdown that\n     * began this input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.initial = currentData;\n\n    /**\n     * Holds the most current pointer data for this Input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.current = currentData;\n\n    /**\n     * Holds the previous pointer data for this Input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.previous = currentData;\n\n    /**\n     * The identifier for the pointer / touch / mouse button associated with\n     * this input.\n     *\n     * @type {number}\n     */\n    this.identifier = identifier;\n  }\n\n  /**\n   * The phase of the input: 'start' or 'move' or 'end' or 'cancel'\n   *\n   * @type {string}\n   */\n  get phase() { return this.current.type; }\n\n  /**\n   * The timestamp of the initiating event for this input.\n   *\n   * @type {number}\n   */\n  get startTime() { return this.initial.time; }\n\n  /**\n   * @return {number} The distance between the initiating event for this input\n   *    and its current event.\n   */\n  totalDistance() {\n    return this.initial.point.distanceTo(this.current.point);\n  }\n\n  /**\n   * Saves the given raw event in PointerData form as the current data for this\n   * input, pushing the old current data into the previous slot, and tossing\n   * out the old previous data.\n   *\n   * @param {Event} event - The event object to wrap with a PointerData.\n   */\n  update(event) {\n    this.previous = this.current;\n    this.current = new PointerData(event, this.identifier);\n  }\n}\n\nmodule.exports = Input;\n\n","'use strict';\n\nconst {\n  CANCEL,\n  END,\n  MOVE,\n  PHASE,\n  START,\n} = require('./constants.js');\nconst Input     = require('./Input.js');\nconst Point2D   = require('./Point2D.js');\n\nconst symbols = {\n  inputs: Symbol.for('inputs'),\n};\n\n/**\n * Set of helper functions for updating inputs based on type of input.\n * Must be called with a bound 'this', via bind(), or call(), or apply().\n *\n * @private\n * @inner\n * @memberof westure-core.State\n */\nconst update_fns = {\n  TouchEvent: function TouchEvent(event) {\n    Array.from(event.changedTouches).forEach(touch => {\n      this.updateInput(event, touch.identifier);\n    });\n  },\n\n  PointerEvent: function PointerEvent(event) {\n    this.updateInput(event, event.pointerId);\n  },\n\n  MouseEvent: function MouseEvent(event) {\n    if (event.button === 0) {\n      this.updateInput(event, event.button);\n    }\n  },\n};\n\n/**\n * Keeps track of currently active and ending input points on the interactive\n * surface.\n *\n * @memberof westures-core\n *\n * @param {Element} element - The element underpinning the associated Region.\n */\nclass State {\n  constructor(element) {\n    /**\n     * Keep a reference to the element for the associated region.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Keeps track of the current Input objects.\n     *\n     * @alias [@@inputs]\n     * @type {Map.<westures-core.Input>}\n     * @memberof westure-core.State\n     */\n    this[symbols.inputs] = new Map();\n\n    /**\n     * All currently valid inputs, including those that have ended.\n     *\n     * @type {westures-core.Input[]}\n     */\n    this.inputs = [];\n\n    /**\n     * The array of currently active inputs, sourced from the current Input\n     * objects. \"Active\" is defined as not being in the 'end' phase.\n     *\n     * @type {westures-core.Input[]}\n     */\n    this.active = [];\n\n    /**\n     * The array of latest point data for the currently active inputs, sourced\n     * from this.active.\n     *\n     * @type {westures-core.Point2D[]}\n     */\n    this.activePoints = [];\n\n    /**\n     * The centroid of the currently active points.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.centroid = {};\n\n    /**\n     * The latest event that the state processed.\n     *\n     * @type {Event}\n     */\n    this.event = null;\n  }\n\n  /**\n   * Deletes all inputs that are in the 'end' phase.\n   */\n  clearEndedInputs() {\n    this[symbols.inputs].forEach((v, k) => {\n      if (v.phase === 'end') this[symbols.inputs].delete(k);\n    });\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {westures-core.Input[]} Inputs in the given phase.\n   */\n  getInputsInPhase(phase) {\n    return this.inputs.filter(i => i.phase === phase);\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {westures-core.Input[]} Inputs <b>not</b> in the given phase.\n   */\n  getInputsNotInPhase(phase) {\n    return this.inputs.filter(i => i.phase !== phase);\n  }\n\n  /**\n   * @return {boolean} True if there are no active inputs. False otherwise.\n   */\n  hasNoInputs() {\n    return this[symbols.inputs].size === 0;\n  }\n\n  /**\n   * Update the input with the given identifier using the given event.\n   *\n   * @private\n   *\n   * @param {Event} event - The event being captured.\n   * @param {number} identifier - The identifier of the input to update.\n   */\n  updateInput(event, identifier) {\n    switch (PHASE[event.type]) {\n    case START:\n      this[symbols.inputs].set(\n        identifier,\n        new Input(event, identifier),\n      );\n      try {\n        this.element.setPointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n      break;\n\n    // All of 'end', 'move', and 'cancel' perform updates, hence the\n    // following fall-throughs\n    case END:\n      try {\n        this.element.releasePointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n    case CANCEL:\n    case MOVE:\n      if (this[symbols.inputs].has(identifier)) {\n        this[symbols.inputs].get(identifier).update(event);\n      }\n      break;\n\n    default:\n      console.warn(`Unrecognized event type: ${event.type}`);\n    }\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   *\n   * @private\n   * @param {Event} event - The event being captured.\n   */\n  updateAllInputs(event) {\n    update_fns[event.constructor.name].call(this, event);\n    this.updateFields(event);\n  }\n\n  /**\n   * Updates the convenience fields.\n   *\n   * @private\n   * @param {Event} event - Event with which to update the convenience fields.\n   */\n  updateFields(event) {\n    this.inputs = Array.from(this[symbols.inputs].values());\n    this.active = this.getInputsNotInPhase('end');\n    this.activePoints = this.active.map(i => i.current.point);\n    this.centroid = Point2D.centroid(this.activePoints);\n    this.event = event;\n  }\n}\n\nmodule.exports = State;\n\n","'use strict';\n\nconst State = require('./State.js');\nconst {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEY_STRINGS,\n\n  PHASE,\n\n  CANCEL,\n  END,\n  START,\n} = require('./constants.js');\nconst {\n  setDifference,\n  setFilter,\n} = require('./utils.js');\n\n/**\n * Allows the user to specify the control region which will listen for user\n * input events.\n *\n * @memberof westures-core\n *\n * @param {Element} element=window - The element which should listen to input\n * events.\n * @param {object} [options]\n * @param {boolean} [options.capture=false] - Whether the region uses the\n * capture phase of input events. If false, uses the bubbling phase.\n * @param {boolean} [options.preferPointer=true] - If false, the region listens\n * to mouse/touch events instead of pointer events.\n * @param {boolean} [options.preventDefault=true] - Whether the default\n * browser functionality should be disabled. This option should most likely be\n * ignored. Here there by dragons if set to false.\n * @param {string} [options.touchAction='none'] - Value to set the CSS\n * 'touch-action' property to on elements added to the region.\n */\nclass Region {\n  constructor(element = window, options = {}) {\n    options = { ...Region.DEFAULTS, ...options };\n\n    /**\n     * The list of relations between elements, their gestures, and the handlers.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.gestures = new Set();\n\n    /**\n     * The list of active gestures for the current input session.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.activeGestures = new Set();\n\n    /**\n     * The base list of potentially active gestures for the current input\n     * session.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.potentialGestures = new Set();\n\n    /**\n     * The element being bound to.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The user-supplied options for the Region.\n     *\n     * @type {object}\n     */\n    this.options = options;\n\n    /**\n     * The internal state object for a Region.  Keeps track of inputs.\n     *\n     * @type {westures-core.State}\n     */\n    this.state = new State(this.element);\n\n    // Begin operating immediately.\n    this.activate();\n  }\n\n  /**\n   * Activates the region by adding event listeners for all appropriate input\n   * events to the region's element.\n   *\n   * @private\n   */\n  activate() {\n    /*\n     * Listening to both mouse and touch comes with the difficulty that\n     * preventDefault() must be called to prevent both events from iterating\n     * through the system. However I have left it as an option to the end user,\n     * which defaults to calling preventDefault(), in case there's a use-case I\n     * haven't considered or am not aware of.\n     *\n     * It also may be a good idea to keep regions small in large pages.\n     *\n     * See:\n     *  https://www.html5rocks.com/en/mobile/touchandmouse/\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n     */\n    let eventNames = [];\n    if (this.options.preferPointer && window.PointerEvent) {\n      eventNames = POINTER_EVENTS;\n    } else {\n      eventNames = MOUSE_EVENTS.concat(TOUCH_EVENTS);\n    }\n\n    // Bind detected browser events to the region element.\n    const arbitrate = this.arbitrate.bind(this);\n    eventNames.forEach(eventName => {\n      this.element.addEventListener(eventName, arbitrate, {\n        capture: this.options.capture,\n        once:    false,\n        passive: false,\n      });\n    });\n\n    const cancel = this.cancel.bind(this);\n    CANCEL_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, cancel);\n    });\n\n    const handleKeyboardEvent = this.handleKeyboardEvent.bind(this);\n    KEYBOARD_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, handleKeyboardEvent);\n    });\n  }\n\n  /**\n   * Handles a cancel event. Resets the state and the active / potential gesture\n   * lists.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  cancel(event) {\n    if (this.options.preventDefault) event.preventDefault();\n    this.state.inputs.forEach(input => {\n      input.update(event);\n    });\n    this.activeGestures.forEach(gesture => {\n      gesture.evaluateHook(CANCEL, this.state);\n    });\n    this.state = new State(this.element);\n    this.resetActiveGestures();\n  }\n\n  /**\n   * Handles a keyboard event, triggering a restart of any gestures that need\n   * it.\n   *\n   * @private\n   * @param {KeyboardEvent} event - The keyboard event.\n   */\n  handleKeyboardEvent(event) {\n    if (STATE_KEY_STRINGS.indexOf(event.key) >= 0) {\n      this.state.event = event;\n      const oldActiveGestures = this.activeGestures;\n      this.setActiveGestures();\n\n      setDifference(oldActiveGestures, this.activeGestures).forEach(gesture => {\n        gesture.evaluateHook(END, this.state);\n      });\n      setDifference(this.activeGestures, oldActiveGestures).forEach(gesture => {\n        gesture.evaluateHook(START, this.state);\n      });\n    }\n  }\n\n  /**\n   * Resets the active gestures.\n   *\n   * @private\n   */\n  resetActiveGestures() {\n    this.potentialGestures = new Set();\n    this.activeGestures = new Set();\n  }\n\n  /**\n   * Selects active gestures from the list of potentially active gestures.\n   *\n   * @private\n   */\n  setActiveGestures() {\n    this.activeGestures = setFilter(this.potentialGestures, gesture => {\n      return gesture.isEnabled(this.state);\n    });\n  }\n\n  /**\n   * Selects the potentially active gestures.\n   *\n   * @private\n   */\n  setPotentialGestures() {\n    const input = this.state.inputs[0];\n    this.potentialGestures = setFilter(this.gestures, gesture => {\n      return input.initialElements.has(gesture.element);\n    });\n  }\n\n  /**\n   * Selects the gestures that are active for the current input sequence.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   * @param {boolean} isInitial - Whether this is an initial contact.\n   */\n  updateActiveGestures(event, isInitial) {\n    if (PHASE[event.type] === START) {\n      if (isInitial) {\n        this.setPotentialGestures();\n      }\n      this.setActiveGestures();\n    }\n  }\n\n  /**\n   * Evaluates whether the current input session has completed.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  pruneActiveGestures(event) {\n    if (PHASE[event.type] === END) {\n      if (this.state.hasNoInputs()) {\n        this.resetActiveGestures();\n      } else {\n        this.setActiveGestures();\n      }\n    }\n  }\n\n  /**\n   * All input events flow through this function. It makes sure that the input\n   * state is maintained, determines which gestures to analyze based on the\n   * initial position of the inputs, calls the relevant gesture hooks, and\n   * dispatches gesture data.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  arbitrate(event) {\n    const isInitial = this.state.hasNoInputs();\n    this.state.updateAllInputs(event);\n    this.updateActiveGestures(event, isInitial);\n\n    if (this.activeGestures.size > 0) {\n      if (this.options.preventDefault) event.preventDefault();\n\n      this.activeGestures.forEach(gesture => {\n        gesture.evaluateHook(PHASE[event.type], this.state);\n      });\n    }\n\n    this.state.clearEndedInputs();\n    this.pruneActiveGestures(event);\n  }\n\n  /**\n   * Adds the given gesture to the region.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  addGesture(gesture) {\n    gesture.element.style.touchAction = this.options.touchAction;\n    this.gestures.add(gesture);\n  }\n\n  /**\n   * Removes the given gesture from the region.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  removeGesture(gesture) {\n    this.gestures.delete(gesture);\n    this.potentialGestures.delete(gesture);\n    this.activeGestures.delete(gesture);\n  }\n\n  /**\n   * Retrieves Gestures by their associated element.\n   *\n   * @param {Element} element - The element for which to find gestures.\n   *\n   * @return {westures-core.Gesture[]} Gestures to which the element is bound.\n   */\n  getGesturesByElement(element) {\n    return setFilter(this.gestures, gesture => gesture.element === element);\n  }\n\n  /**\n   * Remove all gestures bound to the given element.\n   *\n   * @param {Element} element - The element to unbind.\n   */\n  removeGesturesByElement(element) {\n    this.getGesturesByElement(element).forEach(g => this.removeGesture(g));\n  }\n}\n\nRegion.DEFAULTS = {\n  capture:        false,\n  preferPointer:  true,\n  preventDefault: true,\n  touchAction:    'none',\n};\n\nmodule.exports = Region;\n","'use strict';\n\nconst cascade = Symbol('cascade');\nconst smooth = Symbol('smooth');\n\n/**\n * Determines whether to apply smoothing. Smoothing is on by default but turned\n * off if either:<br>\n *  1. The user explicitly requests that it be turned off.<br>\n *  2. The active pointer is not \"coarse\".<br>\n *\n * @see {@link\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia}\n *\n * @inner\n * @memberof westures-core.Smoothable\n *\n * @param {boolean} isRequested - Whether smoothing was requested by the user.\n *\n * @returns {boolean} Whether to apply smoothing.\n */\nfunction smoothingIsApplicable(isRequested) {\n  if (isRequested) {\n    try {\n      return window.matchMedia('(pointer: coarse)').matches;\n    } catch (e) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A Smoothable datatype is one that is capable of smoothing out a series of\n * values as they come in, one at a time, providing a more consistent series. It\n * does this by creating some inertia in the values using a cascading average.\n * (For those who are interested in such things, this effectively means that it\n * provides a practical application of Zeno's Dichotomy).\n *\n * @example\n * const x = new Smoothable({ identity: 1 });\n * const a = x.next(1);   // 1.0\n * const b = x.next(1.2); // 1.1\n * const c = x.next(0.9); // 1.0\n * const d = x.next(0.6); // 0.8\n * const e = x.next(1.2); // 1.0\n * const f = x.next(1.6); // 1.3\n * x.restart();\n * const g = x.next(0);   // 0.5\n *\n * @memberof westures-core\n *\n * @param {Object} [options]\n * @param {boolean} [options.applySmoothing=true] Whether to apply smoothing to\n * the data.\n * @param {*} [options.identity=0] The identity value of this smoothable data.\n */\nclass Smoothable {\n  constructor(options = {}) {\n    const final_options = { ...Smoothable.DEFAULTS, ...options };\n\n    /**\n     * The function through which smoothed emits are passed.\n     *\n     * @method\n     * @param {*} data - The data to emit.\n     *\n     * @return {*} The smoothed out data.\n     */\n    this.next = null;\n    if (smoothingIsApplicable(final_options.applySmoothing)) {\n      this.next = this[smooth].bind(this);\n    } else {\n      this.next = data => data;\n    }\n\n    /**\n     * The \"identity\" value of the data that will be smoothed.\n     *\n     * @type {*}\n     * @default 0\n     */\n    this.identity = final_options.identity;\n\n    /**\n     * The cascading average of outgoing values.\n     *\n     * @memberof westures-core.Smoothable\n     * @alias [@@cascade]\n     * @type {object}\n     */\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Restart the Smoothable gesture.\n   */\n  restart() {\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Smooth out the outgoing data.\n   *\n   * @memberof westures-core.Smoothable\n   * @alias [@@smooth]\n   * @param {object} data - The next batch of data to emit.\n   *\n   * @return {?object}\n   */\n  [smooth](data) {\n    const average = this.average(this[cascade], data);\n    this[cascade] = average;\n    return average;\n  }\n\n  /**\n   * Average out two values, as part of the smoothing algorithm. Override this\n   * method if the data being smoothed is not a Number.\n   *\n   * @param {number} a\n   * @param {number} b\n   *\n   * @return {number} The average of 'a' and 'b'\n   */\n  average(a, b) {\n    return (a + b) / 2;\n  }\n}\n\nSmoothable.DEFAULTS = {\n  applySmoothing: true,\n  identity:       0,\n};\n\nmodule.exports = Smoothable;\n\n","/**\n * The global API interface for westures-core. Exposes all classes, constants,\n * and routines used by the package. Use responsibly.\n *\n * @namespace westures-core\n */\n\n'use strict';\n\nconst Gesture = require('./src/Gesture.js');\nconst Input = require('./src/Input.js');\nconst Point2D = require('./src/Point2D.js');\nconst PointerData = require('./src/PointerData.js');\nconst Region = require('./src/Region.js');\nconst Smoothable = require('./src/Smoothable.js');\nconst State = require('./src/State.js');\nconst constants = require('./src/constants.js');\nconst utils = require('./src/utils.js');\n\nmodule.exports = {\n  Gesture,\n  Input,\n  Point2D,\n  PointerData,\n  Region,\n  Smoothable,\n  State,\n  ...constants,\n  ...utils,\n};\n\n","/*\n * Contains the Pan class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, Smoothable } = require('../core');\n\n/**\n * Data returned when a Pan is recognized.\n *\n * @typedef {Object} PanData\n * @mixes ReturnTypes.BaseData\n *\n * @property {westures-core.Point2D} translation - The change vector from the\n * last emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pan is defined as a normal movement in any direction.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PanData}\n * @see {westures-core.Smoothable}\n * @memberof westures\n *\n * @param {Element} element - The element with which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Pan extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('pan', element, handler, options);\n\n    /**\n     * The previous point location.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.previous = null;\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<westures-core.Point2D>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: new Point2D() });\n    this.outgoing.average = (a, b) => Point2D.centroid([a, b]);\n  }\n\n  /**\n   * Resets the gesture's progress by saving the current centroid of the active\n   * inputs. To be called whenever the number of inputs changes.\n   *\n   * @param {State} state\n   */\n  restart(state) {\n    this.previous = state.centroid;\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const translation = state.centroid.minus(this.previous);\n    this.previous = state.centroid;\n    return { translation: this.outgoing.next(translation) };\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel(state) {\n    this.restart(state);\n  }\n}\n\nmodule.exports = Pan;\n\n","/*\n * Contains the abstract Pinch class.\n */\n\n'use strict';\n\nconst { Gesture, Smoothable } = require('../core');\n\n/**\n * Data returned when a Pinch is recognized.\n *\n * @typedef {Object} PinchData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} distance - The average distance from an active input to\n *    the centroid.\n * @property {number} scale - The proportional change in distance since last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pinch is defined as two or more inputs moving either together or apart.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PinchData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=2] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Pinch extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Pinch.DEFAULTS, ...options };\n    super('pinch', element, handler, options);\n\n    /**\n     * The previous distance.\n     *\n     * @type {number}\n     */\n    this.previous = 0;\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: 1 });\n  }\n\n  /**\n   * Initializes the gesture progress.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    this.previous = state.centroid.averageDistanceTo(state.activePoints);\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const distance = state.centroid.averageDistanceTo(state.activePoints);\n    const scale = distance / this.previous;\n    this.previous = distance;\n    return { distance, scale: this.outgoing.next(scale) };\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel(state) {\n    this.restart(state);\n  }\n}\n\nPinch.DEFAULTS = Object.freeze({\n  minInputs: 2,\n});\n\nmodule.exports = Pinch;\n\n","/*\n * Contains the Press class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, MOVE } = require('../core');\n\n/**\n * Data returned when a Press is recognized.\n *\n * @typedef {Object} PressData\n *\n * @property {westures-core.Point2D} centroid - The current centroid of the\n * input points.\n * @property {westures-core.Point2D} initial - The initial centroid of the input\n * points.\n * @property {number} distance - The total movement since initial contact.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Press is defined as one or more input points being held down without\n * moving. Press gestures may be stacked by pressing with additional pointers\n * beyond the minimum, so long as none of the points move or are lifted, a Press\n * will be recognized for each additional pointer.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PressData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {number} [options.delay=1000] - The delay before emitting, during\n * which time the number of inputs must not go below minInputs.\n * @param {number} [options.tolerance=10] - The tolerance in pixels a user can\n * move and still allow the gesture to emit.\n */\nclass Press extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Press.DEFAULTS, ...options };\n    super('press', element, handler, options);\n\n    /**\n     * The delay before emitting a press event, during which time the number of\n     * inputs must not change.\n     *\n     * @type {number}\n     */\n    this.delay = options.delay;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Press gesture to be triggered more easily.\n     *\n     * @type {number}\n     */\n    this.tolerance = options.tolerance;\n  }\n\n  start(state) {\n    const initial = state.centroid;\n    const originalInputs = Array.from(state.active);\n    setTimeout(() => {\n      const inputs = state.active.filter(i => originalInputs.includes(i));\n\n      // Due to the timeout, possible that centroid is null...\n      if (inputs.length === originalInputs.length) {\n        const centroid = Point2D.centroid(inputs.map(i => i.current.point));\n        const distance = initial.distanceTo(centroid);\n        if (distance <= this.tolerance) {\n          this.recognize(MOVE, state, { centroid, distance, initial });\n        }\n      }\n    }, this.delay);\n  }\n}\n\nPress.DEFAULTS = Object.freeze({\n  delay:     1000,\n  tolerance: 10,\n});\n\nmodule.exports = Press;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, Smoothable } = require('../core');\n\n/**\n * Data returned when a Pivotable is recognized.\n *\n * @typedef {Object} SwivelData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * Determine the center point of the given element's bounding client rectangle.\n *\n * @inner\n * @memberof westures.Pivotable\n *\n * @param {Element} element - The DOM element to analyze.\n * @return {westures-core.Point2D} - The center of the element's bounding client\n * rectangle.\n */\nfunction getClientCenter(element) {\n  const rect = element.getBoundingClientRect();\n  return new Point2D(\n    rect.left + (rect.width / 2),\n    rect.top + (rect.height / 2),\n  );\n}\n\n/**\n * A Pivotable is a single input rotating around a fixed point. The fixed point\n * is determined by the input's location at its 'start' phase.\n *\n * @extends westures.Gesture\n * @see {ReturnTypes.SwivelData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Pivotable extends Gesture {\n  constructor(type = 'pivotable', element, handler, options = {}) {\n    super(type, element, handler, options);\n    options = { ...Pivotable.DEFAULTS, ...options };\n\n    /**\n     * The radius around the start point in which to do nothing.\n     *\n     * @type {number}\n     */\n    this.deadzoneRadius = options.deadzoneRadius;\n\n    /**\n     * Normally the center point of the gesture's element is used as the pivot.\n     * If this option is set, the initial contact point with the element is used\n     * as the pivot instead.\n     *\n     * @type {boolean}\n     */\n    this.dynamicPivot = options.dynamicPivot;\n\n    /**\n     * The pivot point of the pivotable.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.pivot = null;\n\n    /**\n     * The previous data.\n     *\n     * @type {number}\n     */\n    this.previous = 0;\n\n    /**\n     * The outgoing data.\n     *\n     * @type {westures-core.Smoothable}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  /**\n   * Updates the previous data. It will be called during the 'start' and 'end'\n   * phases, and should also be called during the 'move' phase implemented by\n   * the subclass.\n   *\n   * @abstract\n   * @param {State} state - the current input state.\n   */\n  updatePrevious() {\n    throw 'Gestures which extend Pivotable must implement updatePrevious()';\n  }\n\n  /**\n   * Restart the given progress object using the given input object.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    if (this.dynamicPivot) {\n      this.pivot = state.centroid;\n      this.previous = 0;\n    } else {\n      this.pivot = getClientCenter(this.element);\n      this.updatePrevious(state);\n    }\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  end(state) {\n    if (state.active.length > 0) {\n      this.restart(state);\n    } else {\n      this.outgoing.restart();\n    }\n  }\n\n  cancel() {\n    this.outgoing.restart();\n  }\n}\n\nPivotable.DEFAULTS = Object.freeze({\n  deadzoneRadius: 15,\n  dynamicPivot:   false,\n});\n\nPivotable.getClientCenter = getClientCenter;\n\nmodule.exports = Pivotable;\n\n","/*\n * Contains the abstract Pull class.\n */\n\n'use strict';\n\nconst { Smoothable } = require('../core');\nconst Pivotable = require('./Pivotable.js');\n\n/**\n * Data returned when a Pull is recognized.\n *\n * @typedef {Object} PullData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} distance - The average distance from an active input to\n * the centroid.\n * @property {number} scale - The proportional change in distance since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pull is defined as a single input moving away from or towards a pivot\n * point.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PullData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Pull extends Pivotable {\n  constructor(element, handler, options = {}) {\n    super('pull', element, handler, options);\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: 1 });\n  }\n\n  updatePrevious(state) {\n    this.previous = this.pivot.distanceTo(state.centroid);\n  }\n\n  move(state) {\n    const pivot = this.pivot;\n    const distance = pivot.distanceTo(state.centroid);\n    const scale = distance / this.previous;\n\n    let rv = null;\n    if (distance > this.deadzoneRadius && this.previous > this.deadzoneRadius) {\n      rv = { distance, scale: this.outgoing.next(scale), pivot };\n    }\n\n    /*\n     * Updating the previous distance regardless of emit prevents sudden changes\n     * when the user exits the deadzone circle.\n     */\n    this.previous = distance;\n\n    return rv;\n  }\n}\n\nmodule.exports = Pull;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { angularDifference, Gesture, Smoothable } = require('../core');\n\n/**\n * Data returned when a Rotate is recognized.\n *\n * @typedef {Object} RotateData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Rotate is defined as two inputs moving with a changing angle between them.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.RotateData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=2] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Rotate extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Rotate.DEFAULTS, ...options };\n    super('rotate', element, handler, options);\n\n    /**\n     * Track the previous angles for each input.\n     *\n     * @type {number[]}\n     */\n    this.previousAngles = [];\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  /**\n   * Determine the angle from the state's centroid to each of the active inputs.\n   *\n   * @param {State} state - current input state.\n   * @returns {number[]}\n   */\n  anglesFromCentroid(state) {\n    return state.active.map((i) => state.centroid.angleTo(i.current.point));\n  }\n\n  /**\n   * Calculate the per-input angle progress.\n   *\n   * @param {State} state - current input state.\n   * @returns {number} The average change in angle.\n   */\n  getRotation(state) {\n    const stagedAngles = this.anglesFromCentroid(state);\n    const angle = stagedAngles.reduce((total, current, index) => {\n      return total + angularDifference(current, this.previousAngles[index]);\n    }, 0);\n    this.previousAngles = stagedAngles;\n    return angle / state.active.length;\n  }\n\n  /**\n   * Restart the gesture for a new number of inputs.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    this.previousAngles = this.anglesFromCentroid(state);\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const rotation = this.getRotation(state);\n    return rotation ? { rotation: this.outgoing.next(rotation) } : null;\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel() {\n    this.outgoing.restart();\n  }\n}\n\nRotate.DEFAULTS = Object.freeze({\n  minInputs: 2,\n});\n\nmodule.exports = Rotate;\n\n","/*\n * Contains the Swipe class.\n */\n\n'use strict';\n\nconst { Gesture } = require('../core');\n\nconst PROGRESS_STACK_SIZE = 7;\nconst MS_THRESHOLD = 300;\n\n/**\n * Data returned when a Swipe is recognized.\n *\n * @typedef {Object} SwipeData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} velocity - The velocity of the swipe.\n * @property {number} direction - In radians, the direction of the swipe.\n * @property {westures-core.Point2D} point - The point at which the swipe ended.\n * @property {number} time - The epoch time, in ms, when the swipe ended.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * Calculates the angle of movement along a series of moves.\n *\n * @inner\n * @memberof westures.Swipe\n * @see {@link https://en.wikipedia.org/wiki/Mean_of_circular_quantities}\n *\n * @param {{time: number, point: westures-core.Point2D}} moves - The moves list\n * to process.\n * @param {number} vlim - The number of moves to process.\n *\n * @return {number} The angle of the movement.\n */\nfunction calc_angle(moves, vlim) {\n  const point = moves[vlim].point;\n  let sin = 0;\n  let cos = 0;\n  for (let i = 0; i < vlim; ++i) {\n    const angle = moves[i].point.angleTo(point);\n    sin += Math.sin(angle);\n    cos += Math.cos(angle);\n  }\n  sin /= vlim;\n  cos /= vlim;\n  return Math.atan2(sin, cos);\n}\n\n/**\n * Local helper function for calculating the velocity between two timestamped\n * points.\n *\n * @inner\n * @memberof westures.Swipe\n *\n * @param {object} start\n * @param {westures-core.Point2D} start.point\n * @param {number} start.time\n * @param {object} end\n * @param {westures-core.Point2D} end.point\n * @param {number} end.time\n *\n * @return {number} velocity from start to end point.\n */\nfunction velocity(start, end) {\n  const distance = end.point.distanceTo(start.point);\n  const time = end.time - start.time + 1;\n  return distance / time;\n}\n\n/**\n * Calculates the veloctiy of movement through a series of moves.\n *\n * @inner\n * @memberof westures.Swipe\n *\n * @param {{time: number, point: westures-core.Point2D}} moves - The moves list\n * to process.\n * @param {number} vlim - The number of moves to process.\n *\n * @return {number} The velocity of the moves.\n */\nfunction calc_velocity(moves, vlim) {\n  let max = 0;\n  for (let i = 0; i < vlim; ++i) {\n    const current = velocity(moves[i], moves[i + 1]);\n    if (current > max) max = current;\n  }\n  return max;\n}\n\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively\n * increasing velocity and leaving the screen at some point before it drops\n * below it's escape velocity.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.SwipeData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n */\nclass Swipe extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('swipe', element, handler, options);\n\n    /**\n     * Moves list.\n     *\n     * @type {object[]}\n     */\n    this.moves = [];\n\n    /**\n     * Data to emit when all points have ended.\n     *\n     * @type {ReturnTypes.SwipeData}\n     */\n    this.saved = null;\n  }\n\n  /**\n   * Restart the swipe state for a new numper of inputs.\n   */\n  restart() {\n    this.moves = [];\n    this.saved = null;\n  }\n\n  start() {\n    this.restart();\n  }\n\n  move(state) {\n    this.moves.push({\n      time:  Date.now(),\n      point: state.centroid,\n    });\n\n    if (this.moves.length > PROGRESS_STACK_SIZE) {\n      this.moves.splice(0, this.moves.length - PROGRESS_STACK_SIZE);\n    }\n  }\n\n  end(state) {\n    const result = this.getResult();\n    this.moves = [];\n\n    if (state.active.length > 0) {\n      this.saved = result;\n      return null;\n    }\n\n    this.saved = null;\n    return this.validate(result);\n  }\n\n  cancel() {\n    this.restart();\n  }\n\n  /**\n   * Get the swipe result.\n   *\n   * @returns {?ReturnTypes.SwipeData}\n   */\n  getResult() {\n    if (this.moves.length < PROGRESS_STACK_SIZE) {\n      return this.saved;\n    }\n    const vlim = PROGRESS_STACK_SIZE - 1;\n    const { point, time } = this.moves[vlim];\n    const velocity = calc_velocity(this.moves, vlim);\n    const direction = calc_angle(this.moves, vlim);\n    const centroid = point;\n    return { point, velocity, direction, time, centroid };\n  }\n\n  /**\n   * Validates that an emit should occur with the given data.\n   *\n   * @param {?ReturnTypes.SwipeData} data\n   * @returns {?ReturnTypes.SwipeData}\n   */\n  validate(data) {\n    if (data == null) return null;\n    return (Date.now() - data.time > MS_THRESHOLD) ? null : data;\n  }\n}\n\nmodule.exports = Swipe;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { angularDifference, Smoothable } = require('../core');\nconst Pivotable = require('./Pivotable.js');\n\n/**\n * Data returned when a Swivel is recognized.\n *\n * @typedef {Object} SwivelData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Swivel is a single input rotating around a fixed point. The fixed point is\n * determined by the input's location at its 'start' phase.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.SwivelData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Swivel extends Pivotable {\n  constructor(element, handler, options = {}) {\n    super('swivel', element, handler, options);\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  updatePrevious(state) {\n    this.previous = this.pivot.angleTo(state.centroid);\n  }\n\n  move(state) {\n    const pivot = this.pivot;\n    const angle = pivot.angleTo(state.centroid);\n    const rotation = angularDifference(angle, this.previous);\n\n    let rv = null;\n    if (pivot.distanceTo(state.centroid) > this.deadzoneRadius) {\n      rv = { rotation: this.outgoing.next(rotation), pivot };\n    }\n\n    /*\n     * Updating the previous angle regardless of emit prevents sudden flips when\n     * the user exits the deadzone circle.\n     */\n    this.previous = angle;\n\n    return rv;\n  }\n}\n\nmodule.exports = Swivel;\n\n","/*\n * Contains the Tap class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D } = require('../core');\n\n/**\n * Data returned when a Tap is recognized.\n *\n * @typedef {Object} TapData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} x - x coordinate of tap point.\n * @property {number} y - y coordinate of tap point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Tap is defined as a touchstart to touchend event in quick succession.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.TapData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {number} [options.minDelay=0] - The minimum delay between a touchstart\n * and touchend can be configured in milliseconds.\n * @param {number} [options.maxDelay=300] - The maximum delay between a\n * touchstart and touchend can be configured in milliseconds.\n * @param {number} [options.numTaps=1] - Number of taps to require.\n * @param {number} [options.tolerance=10] - The tolerance in pixels a user can\n * move.\n */\nclass Tap extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Tap.DEFAULTS, ...options };\n    super('tap', element, handler, options);\n\n    /**\n     * The minimum amount between a touchstart and a touchend can be configured\n     * in milliseconds. The minimum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     *\n     * @type {number}\n     */\n    this.minDelay = options.minDelay;\n\n    /**\n     * The maximum delay between a touchstart and touchend can be configured in\n     * milliseconds. The maximum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     *\n     * @type {number}\n     */\n    this.maxDelay = options.maxDelay;\n\n    /**\n     * The number of inputs to trigger a Tap can be variable, and the maximum\n     * number being a factor of the browser.\n     *\n     * @type {number}\n     */\n    this.numTaps = options.numTaps;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Tap gesture to be triggered more easily.\n     *\n     * @type {number}\n     */\n    this.tolerance = options.tolerance;\n\n    /**\n     * An array of inputs that have ended recently.\n     *\n     * @type {Input[]}\n     */\n    this.taps = [];\n  }\n\n  end(state) {\n    const now = Date.now();\n\n    // Save the recently ended inputs as taps.\n    this.taps = this.taps.concat(state.getInputsInPhase('end'))\n      .filter(input => {\n        const tdiff = now - input.startTime;\n        return tdiff <= this.maxDelay && tdiff >= this.minDelay;\n      });\n\n    // Validate the list of taps.\n    if (this.taps.length !== this.numTaps ||\n      this.taps.some(i => i.totalDistance() > this.tolerance)) {\n      return null;\n    }\n\n    const centroid = Point2D.centroid(this.taps.map(i => i.current.point));\n    this.taps = []; // Critical! Used taps need to be cleared!\n    return { centroid, ...centroid };\n  }\n}\n\nTap.DEFAULTS = Object.freeze({\n  minDelay:  0,\n  maxDelay:  300,\n  numTaps:   1,\n  tolerance: 10,\n});\n\nmodule.exports = Tap;\n\n","/*\n * Contains the Track class.\n */\n\n'use strict';\n\nconst { Gesture } = require('../core');\n\n/**\n * Data returned when a Track is recognized.\n *\n * @typedef {Object} TrackData\n * @mixes ReturnTypes.BaseData\n *\n * @property {westures-core.Point2D[]} active - Points currently in 'start' or\n *    'move' phase.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Track gesture forwards a list of active points and their centroid on each\n * of the selected phases.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.TrackData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {string[]} [options.phases=[]] Phases to recognize. Entries can be any\n * or all of 'start', 'move', 'end', and 'cancel'.\n */\nclass Track extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Track.DEFAULTS, ...options };\n    super('track', element, handler, options);\n\n    this.trackStart  = options.phases.includes('start');\n    this.trackMove   = options.phases.includes('move');\n    this.trackEnd    = options.phases.includes('end');\n    this.trackCancel = options.phases.includes('cancel');\n  }\n\n  /**\n   * Filters out the state's data, down to what should be emitted.\n\n   * @param {State} state - current input state.\n   * @return {ReturnTypes.TrackData}\n   */\n  data({ activePoints }) {\n    return { active: activePoints };\n  }\n\n  start(state) {\n    return this.trackStart ? this.data(state) : null;\n  }\n\n  move(state) {\n    return this.trackMove ? this.data(state) : null;\n  }\n\n  end(state) {\n    return this.trackEnd ? this.data(state) : null;\n  }\n\n  cancel(state) {\n    return this.trackCancel ? this.data(state) : null;\n  }\n}\n\nTrack.DEFAULTS = Object.freeze({\n  phases: Object.freeze([]),\n});\n\nmodule.exports = Track;\n\n","/**\n * The API interface for Westures. Defines a number of gestures on top of the\n * engine provided by {@link\n * https://mvanderkamp.github.io/westures-core/index.html|westures-core}.\n *\n * @namespace westures\n */\n\n'use strict';\n\nconst core = require('./core');\n\nconst Pan     = require('./src/Pan.js');\nconst Pinch   = require('./src/Pinch.js');\nconst Press   = require('./src/Press.js');\nconst Pull    = require('./src/Pull.js');\nconst Rotate  = require('./src/Rotate.js');\nconst Swipe   = require('./src/Swipe.js');\nconst Swivel  = require('./src/Swivel.js');\nconst Tap     = require('./src/Tap.js');\nconst Track   = require('./src/Track.js');\n\nmodule.exports = {\n  Pan,\n  Pinch,\n  Press,\n  Pull,\n  Rotate,\n  Swipe,\n  Swivel,\n  Tap,\n  Track,\n  ...core,\n};\n\n/**\n * Here are the return \"types\" of the gestures that are included in this\n * package.\n *\n * @namespace ReturnTypes\n */\n\n/**\n * The base data that is included for all emitted gestures.\n *\n * @typedef {Object} BaseData\n *\n * @property {westures-core.Point2D} centroid - The centroid of the input\n * points.\n * @property {Event} event - The input event which caused the gesture to be\n * recognized.\n * @property {string} phase - 'start', 'move', 'end', or 'cancel'.\n * @property {number} radius - The distance of the furthest input to the\n * centroid.\n * @property {string} type - The name of the gesture as specified by its\n * designer.\n * @property {Element} target - The bound target of the gesture.\n *\n * @memberof ReturnTypes\n */\n\n"]}