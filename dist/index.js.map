{"version":3,"sources":["node_modules/westures-core/src/Gesture.js","node_modules/westures-core/src/Point2D.js","node_modules/westures-core/src/constants.js","node_modules/westures-core/src/PointerData.js","node_modules/westures-core/src/utils.js","node_modules/westures-core/src/Input.js","node_modules/westures-core/src/State.js","node_modules/westures-core/src/Region.js","node_modules/westures-core/src/Smoothable.js","node_modules/westures-core/index.js","src/Pan.js","src/Pinch.js","src/Press.js","src/Pivotable.js","src/Pull.js","src/Rotate.js","src/Swipe.js","src/Swivel.js","src/Tap.js","src/Track.js","index.js"],"names":["require","Gesture","Point2D","Smoothable","Pan","element","handler","options","previous","outgoing","identity","average","a","b","centroid","state","restart","translation","minus","next","module","exports","Pinch","settings","DEFAULTS","averageDistanceTo","activePoints","distance","scale","Object","freeze","minInputs","MOVE","Press","delay","tolerance","initial","identifiers","timeout","Set","active","map","i","identifier","clearTimeout","setTimeout","attempt","filter","has","inputs","initialInputs","current","point","distanceTo","length","getClientCenter","rect","getBoundingClientRect","left","width","top","height","Pivotable","type","deadzoneRadius","dynamicPivot","pivot","updatePrevious","Pull","rv","angularDifference","Rotate","previousAngles","angleTo","stagedAngles","anglesFromCentroid","angle","reduce","total","index","rotation","getRotation","PROGRESS_STACK_SIZE","MS_THRESHOLD","calc_angle","moves","vlim","sin","cos","Math","atan2","velocity","start","end","time","calc_velocity","max","Swipe","saved","push","Date","now","splice","result","getResult","validate","direction","data","Swivel","Tap","minDelay","maxDelay","numTaps","taps","concat","getInputsInPhase","input","tdiff","startTime","some","totalDistance","Track","trackStart","phases","includes","trackMove","trackEnd","trackCancel","core"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["'use strict';\n\nlet g_id = 0;\n\n/**\n * The Gesture class that all gestures inherit from. A custom gesture class will\n * need to override some or all of the four phase \"hooks\": start, move, end, and\n * cancel.\n *\n * @memberof westures-core\n *\n * @param {string} type - The name of the gesture.\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n *    is recognized on the associated element.\n * @param {object} [options] - Generic gesture options\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of\n * keys whicyh will disable the gesture. The gesture will not be recognized if\n * one of these keys is pressed. If not specified or an empty list, the gesture\n * is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n */\nclass Gesture {\n  constructor(type, element, handler, options = {}) {\n    if (typeof type !== 'string') {\n      throw new TypeError('Gestures require a string type / name');\n    }\n\n    /**\n     * The name of the gesture. (e.g. 'pan' or 'tap' or 'pinch').\n     *\n     * @type {string}\n     */\n    this.type = type;\n\n    /**\n     * The unique identifier for each gesture. This allows for distinctions\n     * across instances of Gestures that are created on the fly (e.g.\n     * gesture-tap-1, gesture-tap-2).\n     *\n     * @type {string}\n     */\n    this.id = `gesture-${this.type}-${g_id++}`;\n\n    /**\n     * The element to which to associate the gesture.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The function handler to execute when the gesture is recognized on the\n     * associated element.\n     *\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     * The options settings.\n     *\n     * @type {object}\n     */\n    this.options = { ...Gesture.DEFAULTS, ...options };\n  }\n\n  /**\n   * Determines whether this gesture is enabled.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {boolean} true if enabled, false otherwise.\n   */\n  isEnabled(state) {\n    const count = state.active.length;\n    const event = state.event;\n    const { enableKeys, disableKeys, minInputs, maxInputs } = this.options;\n\n    return (minInputs <= count) && (maxInputs >= count) &&\n      (enableKeys.length === 0 || enableKeys.some(k => event[k])) &&\n      !disableKeys.some(k => event[k]);\n  }\n\n  /**\n   * Event hook for the start phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  start() {\n    return null;\n  }\n\n  /**\n   * Event hook for the move phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  move() {\n    return null;\n  }\n\n  /**\n   * Event hook for the end phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  end() {\n    return null;\n  }\n\n  /**\n   * Event hook for when an input is cancelled.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  cancel() {\n    return null;\n  }\n\n  /**\n   * Evalutes the given gesture hook, and dispatches any data that is produced\n   * by calling [recognize]{@link westures-core.Gesture#recognize}.\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {westures-core.State} state - The current State instance.\n   */\n  evaluateHook(hook, state) {\n    const data = this[hook](state);\n    if (data) {\n      this.recognize(hook, state, data);\n    }\n  }\n\n  /**\n   * Recognize a Gesture by calling the handler. Standardizes the way the\n   * handler is called so that classes extending Gesture can circumvent the\n   * evaluateHook approach but still provide results that have a common format.\n   *\n   * Note that the properties in the \"data\" object will receive priority when\n   * constructing the results. This can be used to override standard results\n   * such as the phase or the centroid.\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {westures-core.State} state - current input state.\n   * @param {Object} data - Results data specific to the recognized gesture.\n   */\n  recognize(hook, state, data) {\n    this.handler({\n      centroid: state.centroid,\n      event:    state.event,\n      phase:    hook,\n      type:     this.type,\n      target:   this.element,\n      ...data,\n    });\n  }\n}\n\nGesture.DEFAULTS = Object.freeze({\n  enableKeys:  [],\n  disableKeys: [],\n  minInputs:   1,\n  maxInputs:   Number.MAX_VALUE,\n});\n\nmodule.exports = Gesture;\n\n","'use strict';\n\n/**\n * The Point2D class stores and operates on 2-dimensional points, represented as\n * x and y coordinates.\n *\n * @memberof westures-core\n *\n * @param {number} [ x=0 ] - The x coordinate of the point.\n * @param {number} [ y=0 ] - The y coordinate of the point.\n */\nclass Point2D {\n  constructor(x = 0, y = 0) {\n    /**\n     * The x coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.y = y;\n  }\n\n  /**\n   * Calculates the angle between this point and the given point.\n   *\n   * @param {!westures-core.Point2D} point - Projected point for calculating the\n   * angle.\n   *\n   * @return {number} Radians along the unit circle where the projected\n   * point lies.\n   */\n  angleTo(point) {\n    return Math.atan2(point.y - this.y, point.x - this.x);\n  }\n\n  /**\n   * Determine the average distance from this point to the provided array of\n   * points.\n   *\n   * @param {!westures-core.Point2D[]} points - the Point2D objects to calculate\n   *    the average distance to.\n   *\n   * @return {number} The average distance from this point to the provided\n   *    points.\n   */\n  averageDistanceTo(points) {\n    return this.totalDistanceTo(points) / points.length;\n  }\n\n  /**\n   * Clone this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, identical to this point.\n   */\n  clone() {\n    return new Point2D(this.x, this.y);\n  }\n\n  /**\n   * Calculates the distance between two points.\n   *\n   * @param {!westures-core.Point2D} point - Point to which the distance is\n   * calculated.\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(point) {\n    return Math.hypot(point.x - this.x, point.y - this.y);\n  }\n\n  /**\n   * Subtract the given point from this point.\n   *\n   * @param {!westures-core.Point2D} point - Point to subtract from this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the result of (this\n   * - point).\n   */\n  minus(point) {\n    return new Point2D(\n      this.x - point.x,\n      this.y - point.y,\n    );\n  }\n\n  /**\n   * Return the summation of this point to the given point.\n   *\n   * @param {!westures-core.Point2D} point - Point to add to this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the addition of the\n   * two points.\n   */\n  plus(point) {\n    return new Point2D(\n      this.x + point.x,\n      this.y + point.y,\n    );\n  }\n\n  /**\n   * Calculates the total distance from this point to an array of points.\n   *\n   * @param {!westures-core.Point2D[]} points - The array of Point2D objects to\n   *    calculate the total distance to.\n   *\n   * @return {number} The total distance from this point to the provided points.\n   */\n  totalDistanceTo(points) {\n    return points.reduce((d, p) => d + this.distanceTo(p), 0);\n  }\n\n  /**\n   * Calculates the centroid of a list of points.\n   *\n   * @param {westures-core.Point2D[]} points - The array of Point2D objects for\n   * which to calculate the centroid.\n   *\n   * @return {westures-core.Point2D} The centroid of the provided points.\n   */\n  static centroid(points = []) {\n    if (points.length === 0) return null;\n\n    const total = Point2D.sum(points);\n    total.x /= points.length;\n    total.y /= points.length;\n    return total;\n  }\n\n  /**\n   * Calculates the sum of the given points.\n   *\n   * @param {westures-core.Point2D[]} points - The Point2D objects to sum up.\n   *\n   * @return {westures-core.Point2D} A new Point2D representing the sum of the\n   * given points.\n   */\n  static sum(points = []) {\n    return points.reduce(\n      (total, pt) => {\n        total.x += pt.x;\n        total.y += pt.y;\n        return total;\n      },\n      new Point2D(0, 0),\n    );\n  }\n}\n\nmodule.exports = Point2D;\n\n","'use strict';\n\n/**\n * List of events that trigger the cancel phase.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst CANCEL_EVENTS = Object.freeze([\n  'blur',\n  'pointercancel',\n  'touchcancel',\n]);\n\n/**\n * List of keyboard events that trigger a restart.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst KEYBOARD_EVENTS = Object.freeze([\n  'keydown',\n  'keyup',\n]);\n\n/**\n * List of mouse events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst MOUSE_EVENTS = Object.freeze([\n  'mousedown',\n  'mousemove',\n  'mouseup',\n]);\n\n/**\n * List of pointer events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst POINTER_EVENTS = Object.freeze([\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n]);\n\n/**\n * List of touch events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst TOUCH_EVENTS = Object.freeze([\n  'touchend',\n  'touchmove',\n  'touchstart',\n]);\n\n/**\n * List of potentially state-modifying keys.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst STATE_KEYS = Object.freeze([\n  'altKey',\n  'ctrlKey',\n  'metaKey',\n  'shiftKey',\n]);\n\n/**\n * List of the 'key' values on KeyboardEvent objects of the potentially\n * state-modifying keys.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst STATE_KEY_STRINGS = Object.freeze([\n  'Alt',\n  'Control',\n  'Meta',\n  'Shift',\n]);\n\n/**\n * The cancel phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst CANCEL = 'cancel';\n\n/**\n * The end phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst END = 'end';\n\n/**\n * The move phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst MOVE = 'move';\n\n/**\n * The start phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst START = 'start';\n\n/**\n * Object that normalizes the names of window events to be either of type start,\n * move, end, or cancel.\n *\n * @memberof westures-core\n * @type {object}\n */\nconst PHASE = Object.freeze({\n  blur:           CANCEL,\n  pointercancel:  CANCEL,\n  touchcancel:    CANCEL,\n\n  mouseup:       END,\n  pointerup:     END,\n  touchend:      END,\n\n  mousemove:   MOVE,\n  pointermove: MOVE,\n  touchmove:   MOVE,\n\n  mousedown:   START,\n  pointerdown: START,\n  touchstart:  START,\n});\n\nmodule.exports = {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEYS,\n  STATE_KEY_STRINGS,\n\n  CANCEL,\n  END,\n  MOVE,\n  START,\n\n  PHASE,\n};\n\n","'use strict';\n\nconst Point2D   = require('./Point2D.js');\nconst { PHASE } = require('./constants.js');\n\n/**\n * @private\n * @inner\n * @memberof westures-core.PointerData\n *\n * @return {Event} The Event object which corresponds to the given identifier.\n *    Contains clientX, clientY values.\n */\nfunction getEventObject(event, identifier) {\n  if (event.changedTouches) {\n    return Array.from(event.changedTouches).find(touch => {\n      return touch.identifier === identifier;\n    });\n  }\n  return event;\n}\n\n/**\n * Low-level storage of pointer data based on incoming data from an interaction\n * event.\n *\n * @memberof westures-core\n *\n * @param {Event} event - The event object being wrapped.\n * @param {number} identifier - The index of touch if applicable\n */\nclass PointerData {\n  constructor(event, identifier) {\n    const { clientX, clientY } = getEventObject(event, identifier);\n\n    /**\n     * The original event object.\n     *\n     * @type {Event}\n     */\n    this.event = event;\n\n    /**\n     * The type or 'phase' of this batch of pointer data. 'start' or 'move' or\n     * 'end' or 'cancel'\n     *\n     * @type {string}\n     */\n    this.type = PHASE[event.type];\n\n    /**\n     * The timestamp of the event in milliseconds elapsed since January 1, 1970,\n     * 00:00:00 UTC.\n     *\n     * @type {number}\n     */\n    this.time = Date.now();\n\n    /**\n     * The (x,y) coordinate of the event, wrapped in a Point2D.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.point = new Point2D(clientX, clientY);\n  }\n}\n\nmodule.exports = PointerData;\n\n","'use strict';\n\nconst PI_2   = 2 * Math.PI;\nconst PI_NVE = -Math.PI;\n\n/**\n * Helper function to regulate angular differences, so they don't jump from 0 to\n * 2 * PI or vice versa.\n *\n * @memberof westures-core\n *\n * @param {number} a - Angle in radians.\n * @param {number} b - Angle in radians.\n\n * @return {number} c, given by: c = a - b such that |c| < PI\n */\nfunction angularDifference(a, b) {\n  let diff = a - b;\n  if (diff < PI_NVE) {\n    diff += PI_2;\n  } else if (diff > Math.PI) {\n    diff -= PI_2;\n  }\n  return diff;\n}\n\n/**\n * In case event.composedPath() is not available.\n *\n * @memberof westures-core\n *\n * @param {Event} event\n *\n * @return {Element[]} The elements along the composed path of the event.\n */\nfunction getPropagationPath(event) {\n  if (typeof event.composedPath === 'function') {\n    return event.composedPath();\n  }\n\n  const path = [];\n  for (let node = event.target; node !== document; node = node.parentNode) {\n    path.push(node);\n  }\n  path.push(document);\n  path.push(window);\n\n  return path;\n}\n\n/**\n * Performs a set filter operation.\n *\n * @memberof westures-core\n *\n * @param {Set} set - The set to filter.\n * @param {Function} predicate - Function to test elements of 'set'. Receives\n * one argument: the current set element.\n *\n * @return {Set} Set consisting of elements in 'set' for which 'predicate' is\n * true.\n */\nfunction setFilter(set, predicate) {\n  const result = new Set();\n  set.forEach(element => {\n    if (predicate(element)) {\n      result.add(element);\n    }\n  });\n  return result;\n}\n\n/**\n * Performs a set difference operation.\n *\n * @memberof westures-core\n *\n * @param {Set} left - Base set.\n * @param {Set} right - Set of elements to remove from 'left'.\n *\n * @return {Set} Set consisting of elements in 'left' that are not in\n * 'right'.\n */\nfunction setDifference(left, right) {\n  return setFilter(left, element => !right.has(element));\n}\n\nmodule.exports = Object.freeze({\n  angularDifference,\n  getPropagationPath,\n  setDifference,\n  setFilter,\n});\n\n","'use strict';\n\nconst PointerData = require('./PointerData.js');\nconst { getPropagationPath } = require('./utils.js');\n\n/**\n * Tracks a single input and contains information about the current, previous,\n * and initial events. Contains the progress of each Input and its associated\n * gestures.\n *\n * @memberof westures-core\n *\n * @param {(PointerEvent | MouseEvent | TouchEvent)} event - The input event\n * which will initialize this Input object.\n * @param {number} identifier - The identifier for this input, so that it can\n * be located in subsequent Event objects.\n */\nclass Input {\n  constructor(event, identifier) {\n    const currentData = new PointerData(event, identifier);\n\n    /**\n     * The set of elements along the original event's propagation path at the\n     * time it was dispatched.\n     *\n     * @type {WeakSet.<Element>}\n     */\n    this.initialElements = new WeakSet(getPropagationPath(event));\n\n    /**\n     * Holds the initial data from the mousedown / touchstart / pointerdown that\n     * began this input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.initial = currentData;\n\n    /**\n     * Holds the most current pointer data for this Input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.current = currentData;\n\n    /**\n     * Holds the previous pointer data for this Input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.previous = currentData;\n\n    /**\n     * The identifier for the pointer / touch / mouse button associated with\n     * this input.\n     *\n     * @type {number}\n     */\n    this.identifier = identifier;\n  }\n\n  /**\n   * The phase of the input: 'start' or 'move' or 'end' or 'cancel'\n   *\n   * @type {string}\n   */\n  get phase() { return this.current.type; }\n\n  /**\n   * The timestamp of the initiating event for this input.\n   *\n   * @type {number}\n   */\n  get startTime() { return this.initial.time; }\n\n  /**\n   * @return {number} The distance between the initiating event for this input\n   *    and its current event.\n   */\n  totalDistance() {\n    return this.initial.point.distanceTo(this.current.point);\n  }\n\n  /**\n   * Saves the given raw event in PointerData form as the current data for this\n   * input, pushing the old current data into the previous slot, and tossing\n   * out the old previous data.\n   *\n   * @param {Event} event - The event object to wrap with a PointerData.\n   */\n  update(event) {\n    this.previous = this.current;\n    this.current = new PointerData(event, this.identifier);\n  }\n}\n\nmodule.exports = Input;\n\n","'use strict';\n\nconst {\n  CANCEL,\n  END,\n  MOVE,\n  PHASE,\n  START,\n} = require('./constants.js');\nconst Input     = require('./Input.js');\nconst Point2D   = require('./Point2D.js');\n\nconst symbols = Object.freeze({\n  inputs: Symbol.for('inputs'),\n});\n\n/**\n * Set of helper functions for updating inputs based on type of input.\n * Must be called with a bound 'this', via bind(), or call(), or apply().\n *\n * @private\n * @inner\n * @memberof westure-core.State\n */\nconst update_fns = {\n  TouchEvent: function TouchEvent(event) {\n    Array.from(event.changedTouches).forEach(touch => {\n      this.updateInput(event, touch.identifier);\n    });\n  },\n\n  PointerEvent: function PointerEvent(event) {\n    this.updateInput(event, event.pointerId);\n  },\n\n  MouseEvent: function MouseEvent(event) {\n    if (event.button === 0) {\n      this.updateInput(event, event.button);\n    }\n  },\n};\n\n/**\n * Keeps track of currently active and ending input points on the interactive\n * surface.\n *\n * @memberof westures-core\n *\n * @param {Element} element - The element underpinning the associated Region.\n */\nclass State {\n  constructor(element) {\n    /**\n     * Keep a reference to the element for the associated region.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Keeps track of the current Input objects.\n     *\n     * @alias [@@inputs]\n     * @type {Map.<westures-core.Input>}\n     * @memberof westure-core.State\n     */\n    this[symbols.inputs] = new Map();\n\n    /**\n     * All currently valid inputs, including those that have ended.\n     *\n     * @type {westures-core.Input[]}\n     */\n    this.inputs = [];\n\n    /**\n     * The array of currently active inputs, sourced from the current Input\n     * objects. \"Active\" is defined as not being in the 'end' phase.\n     *\n     * @type {westures-core.Input[]}\n     */\n    this.active = [];\n\n    /**\n     * The array of latest point data for the currently active inputs, sourced\n     * from this.active.\n     *\n     * @type {westures-core.Point2D[]}\n     */\n    this.activePoints = [];\n\n    /**\n     * The centroid of the currently active points.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.centroid = {};\n\n    /**\n     * The latest event that the state processed.\n     *\n     * @type {Event}\n     */\n    this.event = null;\n  }\n\n  /**\n   * Deletes all inputs that are in the 'end' phase.\n   */\n  clearEndedInputs() {\n    this[symbols.inputs].forEach((v, k) => {\n      if (v.phase === 'end') this[symbols.inputs].delete(k);\n    });\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {westures-core.Input[]} Inputs in the given phase.\n   */\n  getInputsInPhase(phase) {\n    return this.inputs.filter(i => i.phase === phase);\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {westures-core.Input[]} Inputs <b>not</b> in the given phase.\n   */\n  getInputsNotInPhase(phase) {\n    return this.inputs.filter(i => i.phase !== phase);\n  }\n\n  /**\n   * @return {boolean} True if there are no active inputs. False otherwise.\n   */\n  hasNoInputs() {\n    return this[symbols.inputs].size === 0;\n  }\n\n  /**\n   * Update the input with the given identifier using the given event.\n   *\n   * @private\n   *\n   * @param {Event} event - The event being captured.\n   * @param {number} identifier - The identifier of the input to update.\n   */\n  updateInput(event, identifier) {\n    switch (PHASE[event.type]) {\n    case START:\n      this[symbols.inputs].set(\n        identifier,\n        new Input(event, identifier),\n      );\n      try {\n        this.element.setPointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n      break;\n\n    // All of 'end', 'move', and 'cancel' perform updates, hence the\n    // following fall-throughs\n    case END:\n      try {\n        this.element.releasePointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n    case CANCEL:\n    case MOVE:\n      if (this[symbols.inputs].has(identifier)) {\n        this[symbols.inputs].get(identifier).update(event);\n      }\n      break;\n\n    default:\n      console.warn(`Unrecognized event type: ${event.type}`);\n    }\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   *\n   * @private\n   * @param {Event} event - The event being captured.\n   */\n  updateAllInputs(event) {\n    update_fns[event.constructor.name].call(this, event);\n    this.updateFields(event);\n  }\n\n  /**\n   * Updates the convenience fields.\n   *\n   * @private\n   * @param {Event} event - Event with which to update the convenience fields.\n   */\n  updateFields(event) {\n    this.inputs = Array.from(this[symbols.inputs].values());\n    this.active = this.getInputsNotInPhase('end');\n    this.activePoints = this.active.map(i => i.current.point);\n    this.centroid = Point2D.centroid(this.activePoints);\n    this.event = event;\n  }\n}\n\nmodule.exports = State;\n\n","'use strict';\n\nconst State = require('./State.js');\nconst {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEY_STRINGS,\n\n  PHASE,\n\n  CANCEL,\n  END,\n  START,\n} = require('./constants.js');\nconst {\n  setDifference,\n  setFilter,\n} = require('./utils.js');\n\n/**\n * Allows the user to specify the control region which will listen for user\n * input events.\n *\n * @memberof westures-core\n *\n * @param {Element} element - The element which should listen to input events.\n * @param {object} [options]\n * @param {boolean} [options.capture=false] - Whether the region uses the\n * capture phase of input events. If false, uses the bubbling phase.\n * @param {boolean} [options.preventDefault=true] - Whether the default\n * browser functionality should be disabled. This option should most likely be\n * ignored. Here there by dragons if set to false.\n */\nclass Region {\n  constructor(element, options = {}) {\n    const settings = { ...Region.DEFAULTS, ...options };\n\n    /**\n     * The list of relations between elements, their gestures, and the handlers.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.gestures = new Set();\n\n    /**\n     * The list of active gestures for the current input session.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.activeGestures = new Set();\n\n    /**\n     * The base list of potentially active gestures for the current input\n     * session.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.potentialGestures = new Set();\n\n    /**\n     * The element being bound to.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Whether the region listens for captures or bubbles.\n     *\n     * @type {boolean}\n     */\n    this.capture = settings.capture;\n\n    /**\n     * Whether the default browser functionality should be disabled. This option\n     * should most likely be ignored. Here there by dragons if set to false.\n     *\n     * @type {boolean}\n     */\n    this.preventDefault = settings.preventDefault;\n\n    /**\n     * The internal state object for a Region.  Keeps track of inputs.\n     *\n     * @type {westures-core.State}\n     */\n    this.state = new State(this.element);\n\n    // Begin operating immediately.\n    this.activate();\n  }\n\n  /**\n   * Activates the region by adding event listeners for all appropriate input\n   * events to the region's element.\n   *\n   * @private\n   */\n  activate() {\n    /*\n     * Having to listen to both mouse and touch events is annoying, but\n     * necessary due to conflicting standards and browser implementations.\n     * Pointer is a fallback for now instead of the primary, until I figure out\n     * all the details to do with pointer-events and touch-action and their\n     * cross browser compatibility.\n     *\n     * Listening to both mouse and touch comes with the difficulty that\n     * preventDefault() must be called to prevent both events from iterating\n     * through the system. However I have left it as an option to the end user,\n     * which defaults to calling preventDefault(), in case there's a use-case I\n     * haven't considered or am not aware of.\n     *\n     * It is also a good idea to keep regions small in large pages.\n     *\n     * See:\n     *  https://www.html5rocks.com/en/mobile/touchandmouse/\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n     */\n    let eventNames = [];\n    if (window.TouchEvent || window.MouseEvent) {\n      eventNames = MOUSE_EVENTS.concat(TOUCH_EVENTS);\n    } else {\n      eventNames = POINTER_EVENTS;\n    }\n\n    // Bind detected browser events to the region element.\n    const arbitrate = this.arbitrate.bind(this);\n    eventNames.forEach(eventName => {\n      this.element.addEventListener(eventName, arbitrate, {\n        capture: this.capture,\n        once:    false,\n        passive: false,\n      });\n    });\n\n    const cancel = this.cancel.bind(this);\n    CANCEL_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, cancel);\n    });\n\n    const handleKeyboardEvent = this.handleKeyboardEvent.bind(this);\n    KEYBOARD_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, handleKeyboardEvent);\n    });\n  }\n\n  /**\n   * Handles a cancel event. Resets the state and the active / potential gesture\n   * lists.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  cancel(event) {\n    event.preventDefault();\n    this.state.inputs.forEach(input => {\n      input.update(event);\n    });\n    this.activeGestures.forEach(gesture => {\n      gesture.evaluateHook(CANCEL, this.state);\n    });\n    this.state = new State(this.element);\n    this.resetActiveGestures();\n  }\n\n  /**\n   * Handles a keyboard event, triggering a restart of any gestures that need\n   * it.\n   *\n   * @private\n   * @param {KeyboardEvent} event - The keyboard event.\n   */\n  handleKeyboardEvent(event) {\n    if (STATE_KEY_STRINGS.indexOf(event.key) >= 0) {\n      this.state.event = event;\n      const oldActiveGestures = this.activeGestures;\n      this.setActiveGestures();\n\n      setDifference(oldActiveGestures, this.activeGestures).forEach(gesture => {\n        gesture.evaluateHook(END, this.state);\n      });\n      setDifference(this.activeGestures, oldActiveGestures).forEach(gesture => {\n        gesture.evaluateHook(START, this.state);\n      });\n    }\n  }\n\n  /**\n   * Resets the active gestures.\n   *\n   * @private\n   */\n  resetActiveGestures() {\n    this.potentialGestures = new Set();\n    this.activeGestures = new Set();\n  }\n\n  /**\n   * Selects active gestures from the list of potentially active gestures.\n   *\n   * @private\n   */\n  setActiveGestures() {\n    this.activeGestures = setFilter(this.potentialGestures, gesture => {\n      return gesture.isEnabled(this.state);\n    });\n  }\n\n  /**\n   * Selects the potentially active gestures.\n   *\n   * @private\n   */\n  setPotentialGestures() {\n    const input = this.state.inputs[0];\n    this.potentialGestures = setFilter(this.gestures, gesture => {\n      return input.initialElements.has(gesture.element);\n    });\n  }\n\n  /**\n   * Selects the gestures that are active for the current input sequence.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   * @param {boolean} isInitial - Whether this is an initial contact.\n   */\n  updateActiveGestures(event, isInitial) {\n    if (PHASE[event.type] === START) {\n      if (isInitial) {\n        this.setPotentialGestures();\n      }\n      this.setActiveGestures();\n    }\n  }\n\n  /**\n   * Evaluates whether the current input session has completed.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  pruneActiveGestures(event) {\n    if (PHASE[event.type] === END) {\n      if (this.state.hasNoInputs()) {\n        this.resetActiveGestures();\n      } else {\n        this.setActiveGestures();\n      }\n    }\n  }\n\n  /**\n   * All input events flow through this function. It makes sure that the input\n   * state is maintained, determines which gestures to analyze based on the\n   * initial position of the inputs, calls the relevant gesture hooks, and\n   * dispatches gesture data.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  arbitrate(event) {\n    const isInitial = this.state.hasNoInputs();\n    this.state.updateAllInputs(event);\n    this.updateActiveGestures(event, isInitial);\n\n    if (this.activeGestures.size > 0) {\n      if (this.preventDefault) event.preventDefault();\n\n      this.activeGestures.forEach(gesture => {\n        gesture.evaluateHook(PHASE[event.type], this.state);\n      });\n    }\n\n    this.state.clearEndedInputs();\n    this.pruneActiveGestures(event);\n  }\n\n  /**\n   * Adds the given gesture to the region.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  addGesture(gesture) {\n    this.gestures.add(gesture);\n  }\n\n  /**\n   * Removes the given gesture from the region.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  removeGesture(gesture) {\n    this.gestures.delete(gesture);\n    this.potentialGestures.delete(gesture);\n    this.activeGestures.delete(gesture);\n  }\n\n  /**\n   * Retrieves Gestures by their associated element.\n   *\n   * @param {Element} element - The element for which to find gestures.\n   *\n   * @return {westures-core.Gesture[]} Gestures to which the element is bound.\n   */\n  getGesturesByElement(element) {\n    return setFilter(this.gestures, gesture => gesture.element === element);\n  }\n\n  /**\n   * Remove all gestures bound to the given element.\n   *\n   * @param {Element} element - The element to unbind.\n   */\n  removeGesturesByElement(element) {\n    this.getGesturesByElement(element).forEach(g => this.removeGesture(g));\n  }\n}\n\nRegion.DEFAULTS = Object.freeze({\n  capture:        false,\n  preventDefault: true,\n});\n\nmodule.exports = Region;\n\n","'use strict';\n\nconst cascade = Symbol('cascade');\nconst smooth = Symbol('smooth');\n\n/**\n * Determines whether to apply smoothing. Smoothing is on by default but turned\n * off if either:<br>\n *  1. The user explicitly requests that it be turned off.<br>\n *  2. The active pointer is not \"coarse\".<br>\n *\n * @see {@link\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia}\n *\n * @inner\n * @memberof westures-core.Smoothable\n *\n * @param {boolean} isRequested - Whether smoothing was requested by the user.\n *\n * @returns {boolean} Whether to apply smoothing.\n */\nfunction smoothingIsApplicable(isRequested) {\n  if (isRequested) {\n    try {\n      return window.matchMedia('(pointer: coarse)').matches;\n    } catch (e) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A Smoothable datatype is one that is capable of smoothing out a series of\n * values as they come in, one at a time, providing a more consistent series. It\n * does this by creating some inertia in the values using a cascading average.\n * (For those who are interested in such things, this effectively means that it\n * provides a practical application of Zeno's Dichotomy).\n *\n * @example\n * const x = new Smoothable({ identity: 1 });\n * const a = x.next(1);   // 1.0\n * const b = x.next(1.2); // 1.1\n * const c = x.next(0.9); // 1.0\n * const d = x.next(0.6); // 0.8\n * const e = x.next(1.2); // 1.0\n * const f = x.next(1.6); // 1.3\n * x.restart();\n * const g = x.next(0);   // 0.5\n *\n * @memberof westures-core\n *\n * @param {Object} [options]\n * @param {boolean} [options.applySmoothing=true] Whether to apply smoothing to\n * the data.\n * @param {*} [options.identity=0] The identity value of this smoothable data.\n */\nclass Smoothable {\n  constructor(options = {}) {\n    const final_options = { ...Smoothable.DEFAULTS, ...options };\n\n    /**\n     * The function through which smoothed emits are passed.\n     *\n     * @method\n     * @param {*} data - The data to emit.\n     *\n     * @return {*} The smoothed out data.\n     */\n    this.next = null;\n    if (smoothingIsApplicable(final_options.applySmoothing)) {\n      this.next = this[smooth].bind(this);\n    } else {\n      this.next = data => data;\n    }\n\n    /**\n     * The \"identity\" value of the data that will be smoothed.\n     *\n     * @type {*}\n     * @default 0\n     */\n    this.identity = final_options.identity;\n\n    /**\n     * The cascading average of outgoing values.\n     *\n     * @memberof westures-core.Smoothable\n     * @alias [@@cascade]\n     * @type {object}\n     */\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Restart the Smoothable gesture.\n   */\n  restart() {\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Smooth out the outgoing data.\n   *\n   * @memberof westures-core.Smoothable\n   * @alias [@@smooth]\n   * @param {object} data - The next batch of data to emit.\n   *\n   * @return {?object}\n   */\n  [smooth](data) {\n    const average = this.average(this[cascade], data);\n    this[cascade] = average;\n    return average;\n  }\n\n  /**\n   * Average out two values, as part of the smoothing algorithm. Override this\n   * method if the data being smoothed is not a Number.\n   *\n   * @param {number} a\n   * @param {number} b\n   *\n   * @return {number} The average of 'a' and 'b'\n   */\n  average(a, b) {\n    return (a + b) / 2;\n  }\n}\n\nSmoothable.DEFAULTS = Object.freeze({\n  applySmoothing: true,\n  identity:       0,\n});\n\nmodule.exports = Smoothable;\n\n","/**\n * The global API interface for westures-core. Exposes all classes, constants,\n * and routines used by the package. Use responsibly.\n *\n * @namespace westures-core\n */\n\n'use strict';\n\nconst Gesture = require('./src/Gesture.js');\nconst Input = require('./src/Input.js');\nconst Point2D = require('./src/Point2D.js');\nconst PointerData = require('./src/PointerData.js');\nconst Region = require('./src/Region.js');\nconst Smoothable = require('./src/Smoothable.js');\nconst State = require('./src/State.js');\nconst constants = require('./src/constants.js');\nconst utils = require('./src/utils.js');\n\nmodule.exports = {\n  Gesture,\n  Input,\n  Point2D,\n  PointerData,\n  Region,\n  Smoothable,\n  State,\n  ...constants,\n  ...utils,\n};\n\n","/*\n * Contains the Pan class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, Smoothable } = require('westures-core');\n\n/**\n * Data returned when a Pan is recognized.\n *\n * @typedef {Object} PanData\n * @mixes ReturnTypes.BaseData\n *\n * @property {westures-core.Point2D} translation - The change vector from the\n * last emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pan is defined as a normal movement in any direction.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PanData}\n * @see {westures-core.Smoothable}\n * @memberof westures\n *\n * @param {Element} element - The element with which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Pan extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('pan', element, handler, options);\n\n    /**\n     * The previous point location.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.previous = null;\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<westures-core.Point2D>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: new Point2D() });\n    this.outgoing.average = (a, b) => Point2D.centroid([a, b]);\n  }\n\n  /**\n   * Resets the gesture's progress by saving the current centroid of the active\n   * inputs. To be called whenever the number of inputs changes.\n   *\n   * @param {State} state\n   */\n  restart(state) {\n    this.previous = state.centroid;\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const translation = state.centroid.minus(this.previous);\n    this.previous = state.centroid;\n    return { translation: this.outgoing.next(translation) };\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel(state) {\n    this.restart(state);\n  }\n}\n\nmodule.exports = Pan;\n\n","/*\n * Contains the abstract Pinch class.\n */\n\n'use strict';\n\nconst { Gesture, Smoothable } = require('westures-core');\n\n/**\n * Data returned when a Pinch is recognized.\n *\n * @typedef {Object} PinchData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} distance - The average distance from an active input to\n *    the centroid.\n * @property {number} scale - The proportional change in distance since last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pinch is defined as two or more inputs moving either together or apart.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PinchData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=2] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Pinch extends Gesture {\n  constructor(element, handler, options = {}) {\n    const settings = { ...Pinch.DEFAULTS, ...options };\n    super('pinch', element, handler, settings);\n\n    /**\n     * The previous distance.\n     *\n     * @type {number}\n     */\n    this.previous = 0;\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable({ ...settings, identity: 1 });\n  }\n\n  /**\n   * Initializes the gesture progress.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    this.previous = state.centroid.averageDistanceTo(state.activePoints);\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const distance = state.centroid.averageDistanceTo(state.activePoints);\n    const scale = distance / this.previous;\n    this.previous = distance;\n    return { distance, scale: this.outgoing.next(scale) };\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel(state) {\n    this.restart(state);\n  }\n}\n\nPinch.DEFAULTS = Object.freeze({\n  minInputs: 2,\n});\n\nmodule.exports = Pinch;\n\n","/*\n * Contains the Press class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, MOVE } = require('westures-core');\n\n/**\n * Data returned when a Press is recognized.\n *\n * @typedef {Object} PressData\n *\n * @property {westures-core.Point2D} centroid - The current centroid of the\n * input points.\n * @property {westures-core.Point2D} initial - The initial centroid of the input\n * points.\n * @property {number} distance - The total movement since initial contact.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Press is defined as one or more input points being held down.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PressData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {number} [options.delay=1000] - The delay before emitting, during\n * which time the number of inputs must not go below minInputs.\n * @param {number} [options.tolerance=10] - The tolerance in pixels a user can\n * move and still allow the gesture to emit.\n */\nclass Press extends Gesture {\n  constructor(element, handler, options = {}) {\n    const settings = { ...Press.DEFAULTS, ...options };\n    super('press', element, handler, settings);\n\n    /**\n     * The delay before emitting a press event, during which time the number of\n     * inputs must not change.\n     *\n     * @type {number}\n     */\n    this.delay = settings.delay;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Press gesture to be triggered more easily.\n     *\n     * @type {number}\n     */\n    this.tolerance = settings.tolerance;\n\n    /**\n     * The initial centroid.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.initial = null;\n\n    /**\n     * The identities of the pointers that were active when initiated.\n     *\n     * @type {Array.<number>};\n     */\n    this.identifiers = [];\n\n    /**\n     * Saves the timeout callback reference in case it needs to be cleared for\n     * some reason.\n     *\n     * @type {number}\n     */\n    this.timeout = null;\n  }\n\n  start(state) {\n    this.initial = state.centroid;\n    this.identifiers = new Set(state.active.map(i => i.identifier));\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => this.attempt(state), this.delay);\n  }\n\n  /**\n   * Retrieve the inputs that were present initially.\n   *\n   * @param {westures-core.State} state - current input state.\n   */\n  initialInputs(state) {\n    return state.active.filter(i => this.identifiers.has(i.identifier));\n  }\n\n  /**\n   * Try to recognize a Press.\n   *\n   * @param {westures-core.State} state - current input state. Note that\n   * although it was bound when the timeout was set, it is expected to be the\n   * same state object as the current active one, and thus reflective of the\n   * current state.\n   */\n  attempt(state) {\n    const inputs = this.initialInputs(state);\n    const centroid = Point2D.centroid(inputs.map(i => i.current.point));\n    const distance = this.initial.distanceTo(centroid);\n    if (distance <= this.tolerance) {\n      super.recognize(MOVE, state, {\n        centroid,\n        distance,\n        initial:  this.initial,\n      });\n    }\n  }\n\n  end(state) {\n    if (this.initialInputs(state).length !== this.identifiers.length) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n  }\n}\n\nPress.DEFAULTS = Object.freeze({\n  delay:     1000,\n  tolerance: 10,\n});\n\nmodule.exports = Press;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, Smoothable } = require('westures-core');\n\n/**\n * Data returned when a Pivotable is recognized.\n *\n * @typedef {Object} SwivelData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * Determine the center point of the given element's bounding client rectangle.\n *\n * @inner\n * @memberof westures.Pivotable\n *\n * @param {Element} element - The DOM element to analyze.\n * @return {westures-core.Point2D} - The center of the element's bounding client\n * rectangle.\n */\nfunction getClientCenter(element) {\n  const rect = element.getBoundingClientRect();\n  return new Point2D(\n    rect.left + (rect.width / 2),\n    rect.top + (rect.height / 2),\n  );\n}\n\n/**\n * A Pivotable is a single input rotating around a fixed point. The fixed point\n * is determined by the input's location at its 'start' phase.\n *\n * @extends westures.Gesture\n * @see {ReturnTypes.SwivelData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Pivotable extends Gesture {\n  constructor(type = 'pivotable', element, handler, options = {}) {\n    super(type, element, handler, options);\n\n    /**\n     * The radius around the start point in which to do nothing.\n     *\n     * @type {number}\n     */\n    this.deadzoneRadius = options.deadzoneRadius;\n\n    /**\n     * Normally the center point of the gesture's element is used as the pivot.\n     * If this option is set, the initial contact point with the element is used\n     * as the pivot instead.\n     *\n     * @type {boolean}\n     */\n    this.dynamicPivot = options.dynamicPivot;\n\n    /**\n     * The pivot point of the pivotable.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.pivot = null;\n\n    /**\n     * The previous data.\n     *\n     * @type {number}\n     */\n    this.previous = 0;\n\n    /**\n     * The outgoing data.\n     *\n     * @type {westures-core.Smoothable}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  /**\n   * Updates the previous data. It will be called during the 'start' and 'end'\n   * phases, and should also be called during the 'move' phase implemented by\n   * the subclass.\n   *\n   * @abstract\n   * @param {State} state - the current input state.\n   */\n  updatePrevious() {\n    throw 'Gestures which extend Pivotable must implement updatePrevious()';\n  }\n\n  /**\n   * Restart the given progress object using the given input object.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    if (this.dynamicPivot) {\n      this.pivot = state.centroid;\n      this.previous = 0;\n    } else {\n      this.pivot = getClientCenter(this.element);\n      this.updatePrevious(state);\n    }\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  end(state) {\n    if (state.active.length > 0) {\n      this.restart(state);\n    } else {\n      this.outgoing.restart();\n    }\n  }\n\n  cancel() {\n    this.outgoing.restart();\n  }\n}\n\nPivotable.DEFAULTS = Object.freeze({\n  deadzoneRadius: 15,\n  dynamicPivot:   false,\n});\n\nPivotable.getClientCenter = getClientCenter;\n\nmodule.exports = Pivotable;\n\n","/*\n * Contains the abstract Pull class.\n */\n\n'use strict';\n\nconst { Smoothable } = require('westures-core');\nconst Pivotable = require('./Pivotable.js');\n\n/**\n * Data returned when a Pull is recognized.\n *\n * @typedef {Object} PullData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} distance - The average distance from an active input to\n * the centroid.\n * @property {number} scale - The proportional change in distance since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pull is defined as a single input moving away from or towards a pivot\n * point.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PullData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Pull extends Pivotable {\n  constructor(element, handler, options = {}) {\n    super('pull', element, handler, options);\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: 1 });\n  }\n\n  updatePrevious(state) {\n    this.previous = this.pivot.distanceTo(state.centroid);\n  }\n\n  move(state) {\n    const pivot = this.pivot;\n    const distance = pivot.distanceTo(state.centroid);\n    const scale = distance / this.previous;\n\n    let rv = null;\n    if (distance > this.deadzoneRadius && this.previous > this.deadzoneRadius) {\n      rv = { distance, scale: this.outgoing.next(scale), pivot };\n    }\n\n    /*\n     * Updating the previous distance regardless of emit prevents sudden changes\n     * when the user exits the deadzone circle.\n     */\n    this.previous = distance;\n\n    return rv;\n  }\n}\n\nmodule.exports = Pull;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { angularDifference, Gesture, Smoothable } = require('westures-core');\n\n/**\n * Data returned when a Rotate is recognized.\n *\n * @typedef {Object} RotateData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Rotate is defined as two inputs moving with a changing angle between them.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.RotateData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=2] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Rotate extends Gesture {\n  constructor(element, handler, options = {}) {\n    const settings = { ...Rotate.DEFAULTS, ...options };\n    super('rotate', element, handler, settings);\n\n    /**\n     * Track the previous angles for each input.\n     *\n     * @type {number[]}\n     */\n    this.previousAngles = [];\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable(settings);\n  }\n\n  /**\n   * Determine the angle from the state's centroid to each of the active inputs.\n   *\n   * @param {State} state - current input state.\n   * @returns {number[]}\n   */\n  anglesFromCentroid(state) {\n    return state.active.map((i) => state.centroid.angleTo(i.current.point));\n  }\n\n  /**\n   * Calculate the per-input angle progress.\n   *\n   * @param {State} state - current input state.\n   * @returns {number} The average change in angle.\n   */\n  getRotation(state) {\n    const stagedAngles = this.anglesFromCentroid(state);\n    const angle = stagedAngles.reduce((total, current, index) => {\n      return total + angularDifference(current, this.previousAngles[index]);\n    }, 0);\n    this.previousAngles = stagedAngles;\n    return angle / state.active.length;\n  }\n\n  /**\n   * Restart the gesture for a new number of inputs.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    this.previousAngles = this.anglesFromCentroid(state);\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const rotation = this.getRotation(state);\n    return rotation ? { rotation: this.outgoing.next(rotation) } : null;\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel() {\n    this.outgoing.restart();\n  }\n}\n\nRotate.DEFAULTS = Object.freeze({\n  minInputs: 2,\n});\n\nmodule.exports = Rotate;\n\n","/*\n * Contains the Swipe class.\n */\n\n'use strict';\n\nconst { Gesture } = require('westures-core');\n\nconst PROGRESS_STACK_SIZE = 7;\nconst MS_THRESHOLD = 300;\n\n/**\n * Data returned when a Swipe is recognized.\n *\n * @typedef {Object} SwipeData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} velocity - The velocity of the swipe.\n * @property {number} direction - In radians, the direction of the swipe.\n * @property {westures-core.Point2D} point - The point at which the swipe ended.\n * @property {number} time - The epoch time, in ms, when the swipe ended.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * Calculates the angle of movement along a series of moves.\n *\n * @inner\n * @memberof westures.Swipe\n * @see {@link https://en.wikipedia.org/wiki/Mean_of_circular_quantities}\n *\n * @param {{time: number, point: westures-core.Point2D}} moves - The moves list\n * to process.\n * @param {number} vlim - The number of moves to process.\n *\n * @return {number} The angle of the movement.\n */\nfunction calc_angle(moves, vlim) {\n  const point = moves[vlim].point;\n  let sin = 0;\n  let cos = 0;\n  for (let i = 0; i < vlim; ++i) {\n    const angle = moves[i].point.angleTo(point);\n    sin += Math.sin(angle);\n    cos += Math.cos(angle);\n  }\n  sin /= vlim;\n  cos /= vlim;\n  return Math.atan2(sin, cos);\n}\n\n/**\n * Local helper function for calculating the velocity between two timestamped\n * points.\n *\n * @inner\n * @memberof westures.Swipe\n *\n * @param {object} start\n * @param {westures-core.Point2D} start.point\n * @param {number} start.time\n * @param {object} end\n * @param {westures-core.Point2D} end.point\n * @param {number} end.time\n *\n * @return {number} velocity from start to end point.\n */\nfunction velocity(start, end) {\n  const distance = end.point.distanceTo(start.point);\n  const time = end.time - start.time + 1;\n  return distance / time;\n}\n\n/**\n * Calculates the veloctiy of movement through a series of moves.\n *\n * @inner\n * @memberof westures.Swipe\n *\n * @param {{time: number, point: westures-core.Point2D}} moves - The moves list\n * to process.\n * @param {number} vlim - The number of moves to process.\n *\n * @return {number} The velocity of the moves.\n */\nfunction calc_velocity(moves, vlim) {\n  let max = 0;\n  for (let i = 0; i < vlim; ++i) {\n    const current = velocity(moves[i], moves[i + 1]);\n    if (current > max) max = current;\n  }\n  return max;\n}\n\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively\n * increasing velocity and leaving the screen at some point before it drops\n * below it's escape velocity.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.SwipeData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n */\nclass Swipe extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('swipe', element, handler, options);\n\n    /**\n     * Moves list.\n     *\n     * @type {object[]}\n     */\n    this.moves = [];\n\n    /**\n     * Data to emit when all points have ended.\n     *\n     * @type {ReturnTypes.SwipeData}\n     */\n    this.saved = null;\n  }\n\n  /**\n   * Restart the swipe state for a new numper of inputs.\n   */\n  restart() {\n    this.moves = [];\n    this.saved = null;\n  }\n\n  start() {\n    this.restart();\n  }\n\n  move(state) {\n    this.moves.push({\n      time:  Date.now(),\n      point: state.centroid,\n    });\n\n    if (this.moves.length > PROGRESS_STACK_SIZE) {\n      this.moves.splice(0, this.moves.length - PROGRESS_STACK_SIZE);\n    }\n  }\n\n  end(state) {\n    const result = this.getResult();\n    this.moves = [];\n\n    if (state.active.length > 0) {\n      this.saved = result;\n      return null;\n    }\n\n    this.saved = null;\n    return this.validate(result);\n  }\n\n  cancel() {\n    this.restart();\n  }\n\n  /**\n   * Get the swipe result.\n   *\n   * @returns {?ReturnTypes.SwipeData}\n   */\n  getResult() {\n    if (this.moves.length < PROGRESS_STACK_SIZE) {\n      return this.saved;\n    }\n    const vlim = PROGRESS_STACK_SIZE - 1;\n    const { point, time } = this.moves[vlim];\n    const velocity = calc_velocity(this.moves, vlim);\n    const direction = calc_angle(this.moves, vlim);\n    const centroid = point;\n    return { point, velocity, direction, time, centroid };\n  }\n\n  /**\n   * Validates that an emit should occur with the given data.\n   *\n   * @param {?ReturnTypes.SwipeData} data\n   * @returns {?ReturnTypes.SwipeData}\n   */\n  validate(data) {\n    if (data == null) return null;\n    return (Date.now() - data.time > MS_THRESHOLD) ? null : data;\n  }\n}\n\nmodule.exports = Swipe;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { angularDifference, Smoothable } = require('westures-core');\nconst Pivotable = require('./Pivotable.js');\n\n/**\n * Data returned when a Swivel is recognized.\n *\n * @typedef {Object} SwivelData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Swivel is a single input rotating around a fixed point. The fixed point is\n * determined by the input's location at its 'start' phase.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.SwivelData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Swivel extends Pivotable {\n  constructor(element, handler, options = {}) {\n    super('swivel', element, handler, options);\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  updatePrevious(state) {\n    this.previous = this.pivot.angleTo(state.centroid);\n  }\n\n  move(state) {\n    const pivot = this.pivot;\n    const angle = pivot.angleTo(state.centroid);\n    const rotation = angularDifference(angle, this.previous);\n\n    let rv = null;\n    if (pivot.distanceTo(state.centroid) > this.deadzoneRadius) {\n      rv = { rotation: this.outgoing.next(rotation), pivot };\n    }\n\n    /*\n     * Updating the previous angle regardless of emit prevents sudden flips when\n     * the user exits the deadzone circle.\n     */\n    this.previous = angle;\n\n    return rv;\n  }\n}\n\nmodule.exports = Swivel;\n\n","/*\n * Contains the Tap class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D } = require('westures-core');\n\n/**\n * Data returned when a Tap is recognized.\n *\n * @typedef {Object} TapData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} x - x coordinate of tap point.\n * @property {number} y - y coordinate of tap point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Tap is defined as a touchstart to touchend event in quick succession.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.TapData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {number} [options.minDelay=0] - The minimum delay between a touchstart\n * and touchend can be configured in milliseconds.\n * @param {number} [options.maxDelay=300] - The maximum delay between a\n * touchstart and touchend can be configured in milliseconds.\n * @param {number} [options.numTaps=1] - Number of taps to require.\n * @param {number} [options.tolerance=10] - The tolerance in pixels a user can\n * move.\n */\nclass Tap extends Gesture {\n  constructor(element, handler, options = {}) {\n    const settings = { ...Tap.DEFAULTS, ...options };\n    super('tap', element, handler, settings);\n\n    /**\n     * The minimum amount between a touchstart and a touchend can be configured\n     * in milliseconds. The minimum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     *\n     * @type {number}\n     */\n    this.minDelay = settings.minDelay;\n\n    /**\n     * The maximum delay between a touchstart and touchend can be configured in\n     * milliseconds. The maximum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     *\n     * @type {number}\n     */\n    this.maxDelay = settings.maxDelay;\n\n    /**\n     * The number of inputs to trigger a Tap can be variable, and the maximum\n     * number being a factor of the browser.\n     *\n     * @type {number}\n     */\n    this.numTaps = settings.numTaps;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Tap gesture to be triggered more easily.\n     *\n     * @type {number}\n     */\n    this.tolerance = settings.tolerance;\n\n    /**\n     * An array of inputs that have ended recently.\n     *\n     * @type {Input[]}\n     */\n    this.taps = [];\n  }\n\n  end(state) {\n    const now = Date.now();\n\n    // Save the recently ended inputs as taps.\n    this.taps = this.taps.concat(state.getInputsInPhase('end'))\n      .filter(input => {\n        const tdiff = now - input.startTime;\n        return tdiff <= this.maxDelay && tdiff >= this.minDelay;\n      });\n\n    // Validate the list of taps.\n    if (this.taps.length !== this.numTaps ||\n      this.taps.some(i => i.totalDistance() > this.tolerance)) {\n      return null;\n    }\n\n    const centroid = Point2D.centroid(this.taps.map(i => i.current.point));\n    this.taps = []; // Critical! Used taps need to be cleared!\n    return { centroid, ...centroid };\n  }\n}\n\nTap.DEFAULTS = Object.freeze({\n  minDelay:  0,\n  maxDelay:  300,\n  numTaps:   1,\n  tolerance: 10,\n});\n\nmodule.exports = Tap;\n\n","/*\n * Contains the Track class.\n */\n\n'use strict';\n\nconst { Gesture } = require('westures-core');\n\n/**\n * Data returned when a Track is recognized.\n *\n * @typedef {Object} TrackData\n * @mixes ReturnTypes.BaseData\n *\n * @property {westures-core.Point2D[]} active - Points currently in 'start' or\n *    'move' phase.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Track gesture forwards a list of active points and their centroid on each\n * of the selected phases.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.TrackData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {string[]} [options.phases=[]] Phases to recognize. Entries can be any\n * or all of 'start', 'move', 'end', and 'cancel'.\n */\nclass Track extends Gesture {\n  constructor(element, handler, options = {}) {\n    const settings = { ...Track.DEFAULTS, ...options };\n    super('track', element, handler, settings);\n\n    this.trackStart  = settings.phases.includes('start');\n    this.trackMove   = settings.phases.includes('move');\n    this.trackEnd    = settings.phases.includes('end');\n    this.trackCancel = settings.phases.includes('cancel');\n  }\n\n  /**\n   * Filters out the state's data, down to what should be emitted.\n\n   * @param {State} state - current input state.\n   * @return {ReturnTypes.TrackData}\n   */\n  data({ activePoints }) {\n    return { active: activePoints };\n  }\n\n  start(state) {\n    return this.trackStart ? this.data(state) : null;\n  }\n\n  move(state) {\n    return this.trackMove ? this.data(state) : null;\n  }\n\n  end(state) {\n    return this.trackEnd ? this.data(state) : null;\n  }\n\n  cancel(state) {\n    return this.trackCancel ? this.data(state) : null;\n  }\n}\n\n// Default settings.\nTrack.DEFAULTS = Object.freeze({\n  phases: Object.freeze([]),\n});\n\nmodule.exports = Track;\n\n","/**\n * The API interface for Westures. Defines a number of gestures on top of the\n * engine provided by {@link\n * https://mvanderkamp.github.io/westures-core/index.html|westures-core}.\n *\n * @namespace westures\n */\n\n'use strict';\n\nconst core = require('westures-core');\n\nconst Pan     = require('./src/Pan.js');\nconst Pinch   = require('./src/Pinch.js');\nconst Press   = require('./src/Press.js');\nconst Pull    = require('./src/Pull.js');\nconst Rotate  = require('./src/Rotate.js');\nconst Swipe   = require('./src/Swipe.js');\nconst Swivel  = require('./src/Swivel.js');\nconst Tap     = require('./src/Tap.js');\nconst Track   = require('./src/Track.js');\n\nmodule.exports = {\n  Pan,\n  Pinch,\n  Press,\n  Pull,\n  Rotate,\n  Swipe,\n  Swivel,\n  Tap,\n  Track,\n  ...core,\n};\n\n/**\n * Here are the return \"types\" of the gestures that are included in this\n * package.\n *\n * @namespace ReturnTypes\n */\n\n/**\n * The base data that is included for all emitted gestures.\n *\n * @typedef {Object} BaseData\n *\n * @property {westures-core.Point2D} centroid - The centroid of the input\n * points.\n * @property {Event} event - The input event which caused the gesture to be\n * recognized.\n * @property {string} phase - 'start', 'move', 'end', or 'cancel'.\n * @property {number} radius - The distance of the furthest input to the\n * centroid.\n * @property {string} type - The name of the gesture as specified by its\n * designer.\n * @property {Element} target - The bound target of the gesture.\n *\n * @memberof ReturnTypes\n */\n\n"]}